{"version":3,"sources":["../src/index.ts","../src/server.ts","../src/api.ts","../src/utils/a_bogus.ts","../src/utils/index.ts"],"sourcesContent":["import { startServer } from './server.js';\n// 导出API函数供测试使用\nexport { generateImage, generateVideo, ASPECT_RATIO_PRESETS, ImageDimensionCalculator } from './api.js';\n\n// 处理未捕获的异常\nprocess.on('uncaughtException', (error) => {\n  console.error('未捕获的异常:', error);\n});\n\n// 处理未处理的Promise拒绝\nprocess.on('unhandledRejection', (reason, promise) => {\n  console.error('未处理的Promise拒绝:', reason);\n});\n\n// 启动服务器\nconst main = async () => {\n  try {\n    // required: JIMENG_API_TOKEN\n    if (!process.env.JIMENG_API_TOKEN) {\n      throw new Error('JIMENG_API_TOKEN is required!')\n    }\n\n    await startServer();\n  } catch (error) {\n    console.error('启动服务器时出错:', error);\n    process.exit(1);\n  }\n};\n\n// 只有在直接运行时才启动服务器\nif (import.meta.url === `file://${process.argv[1]}`) {\n  main();\n} ","import { McpServer, ResourceTemplate } from \"@modelcontextprotocol/sdk/server/mcp.js\";\nimport { StdioServerTransport } from \"@modelcontextprotocol/sdk/server/stdio.js\";\nimport { z } from \"zod\";\nimport { generateImage, generateVideo, frameInterpolation, superResolution } from \"./api.js\";\n\n// 🚀 [MCP DEBUG] Server startup logging\nconsole.error('🚀 [MCP DEBUG] server.ts loaded at:', new Date().toISOString());\nconsole.error('🚀 [MCP DEBUG] Node.js version:', process.version);\nconsole.error('🚀 [MCP DEBUG] Working directory:', process.cwd());\nconsole.error('🚀 [MCP DEBUG] Environment token available:', !!process.env.JIMENG_API_TOKEN);\nconsole.error('🚀 [MCP DEBUG] Environment token length:', process.env.JIMENG_API_TOKEN?.length || 'N/A');\n\n// 定义服务器返回类型接口\nexport interface ServerInstance {\n  server: McpServer;\n  transport: StdioServerTransport;\n}\n\n// 创建MCP服务器\nexport const createServer = (): McpServer => {\n  console.error('🚀 [MCP DEBUG] Creating MCP server instance...');\n  \n  const server = new McpServer({\n    name: \"Jimeng MCP Server\",\n    version: \"1.0.0\"\n  });\n  \n  console.error('🚀 [MCP DEBUG] MCP server instance created successfully');\n\n  // 添加一个简单的问候工具\n  // 功能：测试连接和基本功能\n  server.tool(\n    \"hello\",\n    { name: z.string().describe(\"要问候的姓名\") },\n    async ({ name }) => ({\n      content: [{ type: \"text\", text: `你好，${name}！` }]\n    })\n  );\n\n  // 添加即梦AI图像生成工具\n  // 功能：使用即梦AI生成高质量图像，支持多种模型和参考图混合\n  // 支持的模型：jimeng-4.0(最新), jimeng-3.0, jimeng-2.1, jimeng-2.0-pro, jimeng-2.0, jimeng-1.4, jimeng-xl-pro\n  // \n  // 🔥 关键技巧：\n  // 1. 在提示词中明确指定需要生成的图片数量，如\"生成4张不同角度的猫咪图片\"\n  // 2. 使用详细的描述词提高质量：风格、光线、构图、色彩等，如\"电影级光线，高清细节\"\n  // 3. jimeng-4.0模型效果最佳，适合复杂场景；jimeng-3.0适合艺术风格\n  // 4. 参考图混合时，sample_strength控制参考程度：0.3-0.5保留原图特征，0.7-0.9创意变化大\n  // 5. 反向提示词避免不需要的元素，如\"模糊，低质量，变形，多余的手指\"\n  // \n  // 📏 宽高比预设使用指南：\n  // • 'auto' (智能): 系统自动选择最适合的尺寸 (1024x1024)\n  // • '21:9': 超宽屏幕比例，适合电影级横向场景 (3024x1296)\n  // • '16:9': 标准宽屏比例，适合横向风景、视频缩略图 (2560x1440)\n  // • '3:2': 传统摄影比例，适合相机拍摄效果 (2496x1664)\n  // • '4:3': 经典显示器比例，适合传统构图 (2304x1728)\n  // • '1:1': 方形比例，适合头像、Instagram图片 (2048x2048)\n  // • '3:4': 竖向传统比例，适合肖像摄影 (1728x2304)\n  // • '2:3': 经典竖向比例，适合书籍封面 (1664x2496)\n  // • '9:16': 竖屏比例，适合手机壁纸、抖音视频 (1440x2560)\n  console.error('🚀 [MCP DEBUG] Registering generateImage tool...');\n  \n  server.tool(\n    \"generateImage\",\n    {\n      filePath: z.string().optional().describe(\"本地图片路径或图片URL（可选，若填写则为图片混合/参考图生成功能）\"),\n      prompt: z.string().describe(\"生成图像的文本描述\"),\n      model: z.string().optional().describe(\"模型名称，可选值: jimeng-4.0,jimeng-3.0, jimeng-2.1, jimeng-2.0-pro, jimeng-2.0, jimeng-1.4, jimeng-xl-pro\"),\n      aspectRatio: z.string().optional().default(\"auto\").describe(\"宽高比预设，支持以下选项: auto(智能), 21:9(超宽屏), 16:9(标准宽屏), 3:2(摄影), 4:3(传统), 1:1(正方形), 3:4(竖屏), 2:3(书籍), 9:16(手机竖屏)\"),\n      sample_strength: z.number().min(0).max(1).optional().default(0.5).describe(\"精细度，范围0-1，默认0.5。数值越小越接近参考图\"),\n      negative_prompt: z.string().optional().default(\"\").describe(\"反向提示词，告诉模型不要生成什么内容\"),\n    },\n    async (params) => {\n      // 🔥 [MCP DEBUG] Tool call entry point - this is the CRITICAL debugging point\n      console.error('🔥 [MCP DEBUG] =================================');\n      console.error('🔥 [MCP DEBUG] generateImage tool called!');\n      console.error('🔥 [MCP DEBUG] Timestamp:', new Date().toISOString());\n      console.error('🔥 [MCP DEBUG] Raw params received:', JSON.stringify(params, null, 2));\n      console.error('🔥 [MCP DEBUG] =================================');\n      try {\n        // 🔍 Debug logging - 记录MCP接收到的原始参数\n        console.log('🔍 [MCP Server] Received raw parameters:', JSON.stringify(params, null, 2));\n        \n        // 🔍 Debug logging - 记录环境变量状态\n        const hasToken = !!process.env.JIMENG_API_TOKEN;\n        console.log('🔍 [MCP Server] Environment token available:', hasToken);\n        if (hasToken) {\n          console.log('🔍 [MCP Server] Token length:', process.env.JIMENG_API_TOKEN?.length);\n        }\n        \n        // 🔍 Debug logging - 记录参数验证后的状态\n        console.log('🔍 [MCP Server] Validated parameters for API call:');\n        console.log('  - filePath:', params.filePath || 'undefined');\n        console.log('  - prompt:', params.prompt ? `\"${params.prompt.substring(0, 50)}...\"` : 'undefined');\n        console.log('  - model:', params.model || 'undefined');\n        console.log('  - aspectRatio:', params.aspectRatio || 'undefined');\n        console.log('  - sample_strength:', params.sample_strength);\n        console.log('  - negative_prompt:', params.negative_prompt || 'empty');\n\n        const imageUrls = await generateImage({\n          filePath: params.filePath,\n          prompt: params.prompt,\n          model: params.model,\n          aspectRatio: params.aspectRatio,\n          sample_strength: params.sample_strength,\n          negative_prompt: params.negative_prompt\n        });\n\n        // 如果没有返回URL数组，返回错误信息\n        if (!imageUrls || (Array.isArray(imageUrls) && imageUrls.length === 0)) {\n          return {\n            content: [{ type: \"text\", text: \"图像生成失败：未能获取图像URL\" }],\n            isError: true\n          };\n        }\n\n\n        // 将返回的图像URL转换为MCP响应格式\n        // 使用单个文本内容，每行一个URL，方便客户端解析\n        let responseText = '';\n        \n        if (typeof imageUrls === 'string') {\n          // 单个URL的情况\n          responseText = imageUrls;\n        } else if (Array.isArray(imageUrls)) {\n          // URL数组的情况，每行一个URL\n          responseText = imageUrls.join('\\n');\n        }\n\n        return {\n          content: [{\n            type: \"text\",\n            text: responseText\n          }]\n        };\n      } catch (error) {\n        // 🔍 Debug logging - 记录详细错误信息\n        console.error('🔍 [MCP Server] Error caught in generateImage tool:');\n        console.error('🔍 [MCP Server] Error type:', error?.constructor?.name);\n        console.error('🔍 [MCP Server] Error message:', error instanceof Error ? error.message : String(error));\n        if (error instanceof Error && error.stack) {\n          console.error('🔍 [MCP Server] Error stack:', error.stack);\n        }\n        \n        // 🔍 记录错误时的参数状态\n        console.error('🔍 [MCP Server] Parameters when error occurred:', JSON.stringify({\n          filePath: params.filePath,\n          prompt: params.prompt ? `${params.prompt.substring(0, 100)}...` : undefined,\n          model: params.model,\n          aspectRatio: params.aspectRatio,\n          sample_strength: params.sample_strength,\n          negative_prompt: params.negative_prompt\n        }, null, 2));\n        \n        const errorMessage = error instanceof Error ? error.message : String(error);\n        return {\n          content: [{ type: \"text\", text: `图像生成失败: ${errorMessage}` }],\n          isError: true\n        };\n      }\n    }\n  );\n  \n  console.error('🚀 [MCP DEBUG] generateImage tool registered successfully');\n\n  // 添加即梦AI视频生成工具\n  // 功能：生成AI视频，支持传统模式（首尾帧）和智能多帧模式\n  // 传统模式：使用1-2张图片作为首尾帧生成视频\n  // 智能多帧模式：使用多个关键帧（最多10帧）生成更复杂的视频，每帧可自定义时长和提示词\n  // 支持720p/1080p分辨率，9:16/16:9等多种比例\n  //\n  // 🔥 关键技巧：\n  // 1. 多帧模式：合理分配帧时长，建议每帧2-3秒，总时长10秒内效果最佳\n  // 2. 提示词一致性：保持主体和风格统一，如\"同一个人物，相同的服装和发型\"\n  // 3. 场景转换：使用过渡词语，如\"缓缓转向\"、\"平滑移动到\"，避免突兀跳跃\n  // 4. 比例选择：9:16适合短视频平台，16:9适合横屏观看，3:4适合产品展示\n  // 5. 运动幅度：避免过大的动作变化，细微的动作更自然流畅\n  // 6. 光线一致：保持统一的光照条件，避免明暗变化过大\n  server.tool(\n    \"generateVideo\",\n    {\n      filePath: z.array(z.string()).optional().describe(\"首帧和尾帧图片路径，支持数组，最多2个元素，分别为首帧和尾帧（传统模式）\"),\n      multiFrames: z.array(z.object({\n        idx: z.number().describe(\"帧索引\"),\n        duration_ms: z.number().min(1000).max(5000).describe(\"帧持续时间（毫秒，范围：1000-5000ms，即1-5秒）\"),\n        prompt: z.string().describe(\"该帧的提示词\"),\n        image_path: z.string().describe(\"该帧的图片路径\")\n      })).max(10).optional().describe(\"智能多帧配置，支持多个关键帧（最多10帧）\"),\n      resolution: z.string().optional().describe(\"分辨率，可选720p或1080p，默认720p\"),\n      model: z.string().optional().describe(\"模型名称，传统模式默认jimeng-video-3.0，多帧模式默认jimeng-video-multiframe\"),\n      prompt: z.string().describe(\"生成视频的文本描述（传统模式）或全局提示词（多帧模式）\"),\n      width: z.number().min(512).max(2560).optional().default(1024).describe(\"视频宽度，范围512-2560，默认1024\"),\n      height: z.number().min(512).max(2560).optional().default(1024).describe(\"视频高度，范围512-2560，默认1024\"),\n      fps: z.number().min(12).max(30).optional().default(24).describe(\"帧率，范围12-30，默认24（多帧模式）\"),\n      duration_ms: z.number().min(3000).max(15000).optional().describe(\"总时长（毫秒，范围3000-15000ms，多帧模式）\"),\n      video_aspect_ratio: z.string().optional().describe(\"视频比例，如'3:4'（多帧模式）\"),\n      refresh_token: z.string().optional().describe(\"即梦API令牌（可选，通常从环境变量读取）\"),\n      req_key: z.string().optional().describe(\"自定义参数，兼容旧接口\")\n    },\n    async (params) => {\n      try {\n        const videoUrl = await generateVideo({\n          filePath: params.filePath,\n          multiFrames: params.multiFrames,\n          resolution: params.resolution,\n          model: params.model,\n          prompt: params.prompt,\n          width: params.width,\n          height: params.height,\n          fps: params.fps,\n          duration_ms: params.duration_ms,\n          video_aspect_ratio: params.video_aspect_ratio,\n          refresh_token: params.refresh_token,\n          req_key: params.req_key\n        });\n        if (!videoUrl) {\n          return {\n            content: [{ type: \"text\", text: \"视频生成失败：未能获取视频URL\" }],\n            isError: true\n          };\n        }\n        return {\n          content: [{ type: \"text\", text: videoUrl }]\n        };\n      } catch (error) {\n        const errorMessage = error instanceof Error ? error.message : String(error);\n        return {\n          content: [{ type: \"text\", text: `视频生成失败: ${errorMessage}` }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  // 添加视频补帧工具\n  // 功能：对已生成的视频进行补帧处理，提升视频流畅度\n  // 支持将24fps视频提升至30fps或60fps，让视频播放更加流畅自然\n  // 需要提供原始视频的videoId和生成历史ID\n  //\n  // 🔥 关键技巧：\n  // 1. 帧率选择：30fps适合常规观看，60fps适合运动场景或高要求场景\n  // 2. 原视频质量：确保原视频动作连贯，避免跳跃式变化影响补帧效果\n  // 3. 处理顺序：建议先完成分辨率提升，再进行补帧处理，效果更佳\n  // 4. 适用场景：人物动作、相机移动、自然场景变化等连续性强的视频效果最好\n  server.tool(\n    \"frameInterpolation\",\n    {\n      videoId: z.string().describe(\"视频ID\"),\n      originHistoryId: z.string().describe(\"原始生成历史ID\"),\n      targetFps: z.union([z.literal(30), z.literal(60)]).describe(\"目标帧率：30或60fps\"),\n      originFps: z.number().describe(\"原始帧率\"),\n      duration: z.number().optional().describe(\"视频时长（毫秒），可选\")\n    },\n    async (params) => {\n      try {\n        const videoUrl = await frameInterpolation({\n          videoId: params.videoId,\n          originHistoryId: params.originHistoryId,\n          targetFps: params.targetFps,\n          originFps: params.originFps,\n          duration: params.duration\n        });\n        \n        if (!videoUrl) {\n          return {\n            content: [{ type: \"text\", text: \"视频补帧失败：未能获取处理后的视频URL\" }],\n            isError: true\n          };\n        }\n        \n        return {\n          content: [{ type: \"text\", text: videoUrl }]\n        };\n      } catch (error) {\n        const errorMessage = error instanceof Error ? error.message : String(error);\n        return {\n          content: [{ type: \"text\", text: `视频补帧失败: ${errorMessage}` }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  // 添加视频分辨率提升工具\n  // 功能：对已生成的视频进行分辨率提升处理，增强视频画质和清晰度\n  // 可将低分辨率视频提升至更高分辨率（如704x1248 → 1408x2496），提供更清晰的视觉效果\n  // 需要提供原始视频的videoId、生成历史ID以及原始和目标分辨率参数\n  //\n  // 🔥 关键技巧：\n  // 1. 分辨率限制：目标分辨率范围768-2560像素（宽或高）\n  // 2. 倍数关系：建议按2倍提升，如720p→1440p，效果最佳，避免奇数倍\n  // 3. 比例保持：确保目标分辨率与原始比例一致，避免画面拉伸变形\n  // 4. 原视频质量：原视频越清晰，分辨率提升效果越好，模糊视频提升有限\n  // 5. 内容适用性：人物、风景、产品展示类视频提升效果明显，抽象内容效果有限\n  server.tool(\n    \"superResolution\",\n    {\n      videoId: z.string().describe(\"视频ID\"),\n      originHistoryId: z.string().describe(\"原始生成历史ID\"),\n      targetWidth: z.number().min(768).max(2560).describe(\"目标宽度，范围768-2560像素\"),\n      targetHeight: z.number().min(768).max(2560).describe(\"目标高度，范围768-2560像素\"),\n      originWidth: z.number().describe(\"原始宽度\"),\n      originHeight: z.number().describe(\"原始高度\")\n    },\n    async (params) => {\n      try {\n        const videoUrl = await superResolution({\n          videoId: params.videoId,\n          originHistoryId: params.originHistoryId,\n          targetWidth: params.targetWidth,\n          targetHeight: params.targetHeight,\n          originWidth: params.originWidth,\n          originHeight: params.originHeight\n        });\n        \n        if (!videoUrl) {\n          return {\n            content: [{ type: \"text\", text: \"视频分辨率提升失败：未能获取处理后的视频URL\" }],\n            isError: true\n          };\n        }\n        \n        return {\n          content: [{ type: \"text\", text: videoUrl }]\n        };\n      } catch (error) {\n        const errorMessage = error instanceof Error ? error.message : String(error);\n        return {\n          content: [{ type: \"text\", text: `视频分辨率提升失败: ${errorMessage}` }],\n          isError: true\n        };\n      }\n    }\n  );\n\n  // 添加一个问候资源\n  server.resource(\n    \"greeting\",\n    new ResourceTemplate(\"greeting://{name}\", { list: undefined }),\n    async (uri, { name }) => ({\n      contents: [{\n        uri: uri.href,\n        text: `欢迎使用Jimeng MCP服务器，${name}！`\n      }]\n    })\n  );\n\n  // 添加一个静态信息资源\n  server.resource(\n    \"info\",\n    \"info://server\",\n    async (uri) => ({\n      contents: [{\n        uri: uri.href,\n        text: `\n            Jimeng MCP 服务器\n            版本: 1.0.0\n            运行于: ${process.platform}\n            Node版本: ${process.version}\n        `\n      }]\n    })\n  );\n\n  // 添加即梦AI图像生成服务信息资源\n  server.resource(\n    \"jimeng-ai\",\n    \"jimeng-ai://info\",\n    async (uri) => ({\n      contents: [{\n        uri: uri.href,\n        text: `\n          即梦AI图像生成服务\n          -----------------\n          通过使用 generateImage 工具提交图像生成请求\n\n          需要在环境变量中设置:\n          JIMENG_API_TOKEN - 即梦API令牌（从即梦网站获取的sessionid）\n\n          参数说明:\n          - filePath: 本地图片路径或图片URL（可选，若填写则为图片混合/参考图生成功能）\n          - prompt: 生成图像的文本描述（必填）\n          - model: 模型名称，可选值: jimeng-3.0, jimeng-2.1, jimeng-2.0-pro, jimeng-2.0, jimeng-1.4, jimeng-xl-pro（可选）\n          - width: 图像宽度，默认值：1024（可选）\n          - height: 图像高度，默认值：1024（可选）\n          - sample_strength: 精细度，默认值：0.5，范围0-1（可选）\n          - negative_prompt: 反向提示词，告诉模型不要生成什么内容（可选）\n\n          示例:\n          generateImage({\n            \"filePath\": \"./test.png\",\n            \"prompt\": \"一只可爱的猫咪\",\n            \"model\": \"jimeng-2.1\",\n            \"width\": 1024,\n            \"height\": 1024,\n            \"sample_strength\": 0.7,\n            \"negative_prompt\": \"模糊，扭曲，低质量\"\n          })\n        `\n      }]\n    })\n  );\n\n  // 添加即梦AI视频生成服务信息资源\n  server.resource(\n    \"jimeng-ai-video\",\n    \"jimeng-ai-video://info\",\n    async (uri) => ({\n      contents: [{\n        uri: uri.href,\n        text: `\n          即梦AI视频生成服务\n          -----------------\n          通过使用 generateVideo 工具提交视频生成请求\n          支持传统首尾帧模式和智能多帧模式\n\n          需要在环境变量中设置:\n          JIMENG_API_TOKEN - 即梦API令牌（从即梦网站获取的sessionid）\n\n          🎬 传统模式参数:\n          - filePath: 首帧和尾帧图片路径，支持数组，最多2个元素，分别为首帧和尾帧（可选）\n          - prompt: 生成视频的文本描述（必填）\n          - model: 模型名称，默认jimeng-video-3.0（可选）\n\n          🎭 智能多帧模式参数:\n          - multiFrames: 智能多帧配置，支持多个关键帧（数组，最多10帧）\n            - idx: 帧索引\n            - duration_ms: 帧持续时间（毫秒，范围：1000-5000ms，即1-5秒）\n            - prompt: 该帧的提示词\n            - image_path: 该帧的图片路径\n          - model: 模型名称，默认jimeng-video-multiframe（可选）\n          - fps: 帧率，默认24（可选）\n          - duration_ms: 总时长（毫秒，可选）\n          - video_aspect_ratio: 视频比例，如\"3:4\"（可选）\n\n          🔧 通用参数:\n          - resolution: 分辨率，可选720p或1080p，默认720p（可选）\n          - width: 视频宽度，默认1024（可选）\n          - height: 视频高度，默认1024（可选）\n          - refresh_token: 即梦API令牌（可选，通常从环境变量读取）\n          - req_key: 自定义参数，兼容旧接口（可选）\n\n          📝 传统模式示例:\n          generateVideo({\n            \"filePath\": [\"./first.png\", \"./last.png\"],\n            \"prompt\": \"一只小狗在草地上奔跑，阳光明媚，高清\",\n            \"model\": \"jimeng-video-3.0\",\n            \"resolution\": \"720p\"\n          })\n\n          📝 智能多帧模式示例:\n          generateVideo({\n            \"multiFrames\": [\n              {\n                \"idx\": 0,\n                \"duration_ms\": 3000,\n                \"prompt\": \"前推\",\n                \"image_path\": \"./frame1.png\"\n              },\n              {\n                \"idx\": 1,\n                \"duration_ms\": 2000,\n                \"prompt\": \"后推\",\n                \"image_path\": \"./frame2.png\"\n              }\n            ],\n            \"prompt\": \"场景切换动画\",\n            \"model\": \"jimeng-video-multiframe\",\n            \"duration_ms\": 5000,\n            \"video_aspect_ratio\": \"3:4\"\n          })\n        `\n      }]\n    })\n  );\n\n  return server;\n};\n\n// 启动服务器\nexport const startServer = async (): Promise<ServerInstance> => {\n  const server = createServer();\n  const transport = new StdioServerTransport();\n\n  console.log(\"Jimeng MCP Server 正在启动...\");\n\n  await server.connect(transport);\n\n  console.log(\"Jimeng MCP Server 已启动\");\n\n  return { server, transport };\n}; ","import axios from 'axios';\nimport * as crypto from 'crypto';\nimport path from 'path';\nimport fs from 'fs';\n// @ts-ignore\nimport crc32 from 'crc32';\nimport { generate_a_bogus } from './utils/a_bogus.js';\nimport { generateMsToken, toUrlParams, generateUuid, jsonEncode, urlEncode, unixTimestamp } from './utils/index.js';\n\n\n// 模型映射\n// jimeng-4.0 (seedream4.0) 的内部模型名称已通过网络请求分析确认\nconst MODEL_MAP: Record<string, string> = {\n  'jimeng-4.0': 'high_aes_general_v40', // 从实际网络请求中获取的正确模型名称\n  'jimeng-3.1': 'high_aes_general_v30l_art_fangzhou:general_v3.0_18b',\n  'jimeng-3.0': 'high_aes_general_v30l:general_v3.0_18b',\n  'jimeng-2.1': 'high_aes_general_v21_L:general_v2.1_L',\n  'jimeng-2.0-pro': 'high_aes_general_v20_L:general_v2.0_L',\n  'jimeng-2.0': 'high_aes_general_v20:general_v2.0',\n  'jimeng-1.4': 'high_aes_general_v14:general_v1.4',\n  'jimeng-xl-pro': 'text2img_xl_sft',\n  // video\n  'jimeng-video-3.0-pro': 'dreamina_ic_generate_video_model_vgfm_3.0_pro',\n  'jimeng-video-3.0': 'dreamina_ic_generate_video_model_vgfm_3.0',\n  'jimeng-video-2.0': 'dreamina_ic_generate_video_model_vgfm_lite',\n  'jimeng-video-2.0-pro': 'dreamina_ic_generate_video_model_vgfm1.0',\n  // multi-frame video\n  'jimeng-video-multiframe': 'dreamina_ic_generate_video_model_vgfm_3.0'\n};\n\n\n// 常量定义\nconst DEFAULT_MODEL = 'jimeng-4.0';\nconst DEFAULT_VIDEO_MODEL = 'jimeng-video-3.0';\nconst DEFAULT_BLEND_MODEL = 'jimeng-3.0';\nconst DRAFT_VERSION = '3.0.2';\nconst DEFAULT_ASSISTANT_ID = '513695'; // 从原始仓库中提取\nconst WEB_ID = Math.random() * 999999999999999999 + 7000000000000000000;\nconst USER_ID = generateUuid().replace(/-/g, '');\nconst UA = \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36\";\n\n// 宽高比预设选项\nexport interface AspectRatioPreset {\n  name: string;\n  ratio: number;\n  displayName: string;\n  imageRatio: number; // 即梦API内部的比例标识符\n}\n\nexport const ASPECT_RATIO_PRESETS: AspectRatioPreset[] = [\n  { name: 'auto', ratio: 0, displayName: '智能', imageRatio: 1 },\n  { name: '21:9', ratio: 21/9, displayName: '21:9', imageRatio: 8 },\n  { name: '16:9', ratio: 16/9, displayName: '16:9', imageRatio: 3 },\n  { name: '3:2', ratio: 3/2, displayName: '3:2', imageRatio: 7 },\n  { name: '4:3', ratio: 4/3, displayName: '4:3', imageRatio: 4 },\n  { name: '1:1', ratio: 1, displayName: '1:1', imageRatio: 1 },\n  { name: '3:4', ratio: 3/4, displayName: '3:4', imageRatio: 2 },\n  { name: '2:3', ratio: 2/3, displayName: '2:3', imageRatio: 6 },\n  { name: '9:16', ratio: 9/16, displayName: '9:16', imageRatio: 5 }\n];\n// 图像尺寸计算工具\nexport class ImageDimensionCalculator {\n  // 标准尺寸映射表（基于用户提供的精确规格）\n  private static readonly STANDARD_DIMENSIONS: Record<string, { width: number; height: number }> = {\n    '21:9': { width: 3024, height: 1296 },\n    '16:9': { width: 2560, height: 1440 },\n    '3:2': { width: 2496, height: 1664 },\n    '4:3': { width: 2304, height: 1728 },\n    '1:1': { width: 2048, height: 2048 },\n    '3:4': { width: 1728, height: 2304 },\n    '2:3': { width: 1664, height: 2496 },\n    '9:16': { width: 1440, height: 2560 }\n  };\n\n  static calculateDimensions(aspectRatio: string = 'auto'): { width: number; height: number; imageRatio: number } {\n    // 获取预设配置\n    const preset = ASPECT_RATIO_PRESETS.find(p => p.name === aspectRatio);\n    if (!preset) {\n      throw new Error(`不支持的宽高比: ${aspectRatio}. 支持的值: ${ASPECT_RATIO_PRESETS.map(p => p.name).join(', ')}`);\n    }\n\n    // 智能模式特殊处理\n    if (preset.name === 'auto') {\n      return { width: 1024, height: 1024, imageRatio: preset.imageRatio };\n    }\n\n    // 直接使用固定表格，不做任何计算或限制\n    const dimensions = this.STANDARD_DIMENSIONS[preset.name];\n    if (!dimensions) {\n      throw new Error(`未找到 ${aspectRatio} 的尺寸配置`);\n    }\n\n    return {\n      width: dimensions.width,\n      height: dimensions.height,\n      imageRatio: preset.imageRatio\n    };\n  }\n\n  static getPresetByName(name: string): AspectRatioPreset | undefined {\n    return ASPECT_RATIO_PRESETS.find(p => p.name === name);\n  }\n\n  static getAllPresets(): AspectRatioPreset[] {\n    return ASPECT_RATIO_PRESETS;\n  }\n\n  static getStandardDimensions(): Record<string, { width: number; height: number }> {\n    return this.STANDARD_DIMENSIONS;\n  }\n}\n\n// 分辨率类型判断工具\nfunction getResolutionType(width: number, height: number): string {\n  const maxDimension = Math.max(width, height);\n  if (maxDimension <= 1024) {\n    return '1k';\n  } else if (maxDimension <= 1536) {\n    return '1.5k';\n  } else if (maxDimension <= 2048) {\n    return '2k';\n  } else if (maxDimension <= 2560) {\n    return '2.5k';\n  } else {\n    return '3k';\n  }\n}\n\n// 接口定义\ninterface LogoInfo {\n  add_logo?: boolean; // 是否添加水印 默认不添加\n  position?: number; // 0-右下角 1-左下角 2-左上角 3-右上角\n  language?: number; // 0-中文（AI生成）1-英文（Generated by AI）\n  opacity?: number; // 0-1 default: 0.3\n  logo_text_content?: string; // 水印文字内容\n}\n\ninterface ImageGenerationParams {\n  filePath?: string; // 图片路径\n  model?: string; // 模型名称，默认使用 DEFAULT_MODEL\n  prompt: string; // 提示词\n  aspectRatio?: string; // 宽高比预设，如 '16:9', '9:16', 'auto' 等\n  sample_strength?: number; // 精细度，默认0.5\n  negative_prompt?: string; // 反向提示词，默认空\n  refresh_token?: string; // 刷新令牌，必需\n  req_key?: string; // 自定义参数，兼容旧接口\n}\n\ninterface MultiFrameConfig {\n  idx: number; // 帧索引\n  duration_ms: number; // 帧持续时间（毫秒，范围：1000-5000ms，即1-5秒）\n  prompt: string; // 该帧的提示词\n  image_path: string; // 该帧的图片路径\n}\n\ninterface VideoGenerationParams {\n  filePath?: string[]; // 首帧和尾帧路径，支持数组（传统模式）\n  multiFrames?: MultiFrameConfig[]; // 智能多帧配置（新模式，最多10帧）\n  resolution?: string; // 分辨率 720p 1080p\n  model?: string; // 模型名称，默认使用 DEFAULT_MODEL\n  prompt: string; // 提示词（传统模式）或全局提示词（多帧模式）\n  width?: number; // 图像宽度，默认1024\n  height?: number; // 图像高度，默认1024\n  fps?: number; // 帧率，默认24（多帧模式）\n  duration_ms?: number; // 总时长（毫秒，多帧模式）\n  video_aspect_ratio?: string; // 视频比例，如\"3:4\"（多帧模式）\n  refresh_token?: string; // 刷新令牌，必需\n  req_key?: string; // 自定义参数，兼容旧接口\n}\n\nexport function generateCookie(refreshToken: string) {\n  return [\n    `_tea_web_id=${WEB_ID}`,\n    `is_staff_user=false`,\n    `store-region=cn-gd`,\n    `store-region-src=uid`,\n    `sid_guard=${refreshToken}%7C${unixTimestamp()}%7C5184000%7CMon%2C+03-Feb-2025+08%3A17%3A09+GMT`,\n    `uid_tt=${USER_ID}`,\n    `uid_tt_ss=${USER_ID}`,\n    `sid_tt=${refreshToken}`,\n    `sessionid=${refreshToken}`,\n    `sessionid_ss=${refreshToken}`,\n    `sid_tt=${refreshToken}`\n  ].join(\"; \");\n}\n\n// 即梦API客户端类\nclass JimengApiClient {\n  private refreshToken: string;\n  private getUploadImageProofUrl = 'https://imagex.bytedanceapi.com/'\n\n  constructor(token?: string) {\n    this.refreshToken = token || process.env.JIMENG_API_TOKEN || '';\n    if (!this.refreshToken) {\n      throw new Error('JIMENG_API_TOKEN 环境变量未设置');\n    }\n  }\n\n  /**\n   * 获取模型映射\n   * @param model 模型名称\n   * @returns 映射后的模型名称\n   */\n  private getModel(model: string): string {\n    const mappedModel = MODEL_MAP[model] || MODEL_MAP[DEFAULT_MODEL];\n    console.log(`🔍 模型映射调试: ${model} -> ${mappedModel} (更新时间: ${new Date().toISOString()})`);\n    return mappedModel;\n  }\n\n  /**\n   * 发送请求到即梦API\n   * @param method 请求方法\n   * @param path 请求路径\n   * @param data 请求数据\n   * @param params 请求参数\n   * @param headers 请求头\n   * @returns 响应结果\n   */\n  private async request(\n    method: string,\n    path: string,\n    data: any = {},\n    params: any = {},\n    headers: any = {}\n  ): Promise<any> {\n    const baseUrl = 'https://jimeng.jianying.com';\n    const url = path.includes('https://') ? path : `${baseUrl}${path}`;\n    const FAKE_HEADERS = {\n      Accept: \"application/json, text/plain, */*\",\n      \"Accept-Encoding\": \"gzip, deflate, br, zstd\",\n      \"Accept-language\": \"zh-CN,zh;q=0.9\",\n      \"Cache-control\": \"no-cache\",\n      \"Last-event-id\": \"undefined\",\n      Appid: DEFAULT_ASSISTANT_ID,\n      Appvr: \"5.8.0\",\n      Origin: \"https://jimeng.jianying.com\",\n      Pragma: \"no-cache\",\n      Priority: \"u=1, i\",\n      Referer: \"https://jimeng.jianying.com\",\n      Pf: \"7\",\n      \"Sec-Ch-Ua\":\n        '\"Google Chrome\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"',\n      \"Sec-Ch-Ua-Mobile\": \"?0\",\n      \"Sec-Ch-Ua-Platform\": '\"Windows\"',\n      \"Sec-Fetch-Dest\": \"empty\",\n      \"Sec-Fetch-Mode\": \"cors\",\n      \"Sec-Fetch-Site\": \"same-origin\",\n      \"User-Agent\": UA\n    };\n    const requestHeaders = {\n      ...FAKE_HEADERS,\n      'Cookie': generateCookie(this.refreshToken),\n      ...headers\n    };\n    try {\n      const response = await axios({\n        method: method.toLowerCase(),\n        url,\n        data: method.toUpperCase() !== 'GET' ? data : undefined,\n        params: method.toUpperCase() === 'GET' ? { ...data, ...params } : params,\n        headers: requestHeaders,\n        timeout: 60000\n      });\n\n\n      return response.data;\n    } catch (error) {\n      if (axios.isAxiosError(error) && error.response) {\n        throw new Error(`即梦API请求错误: ${JSON.stringify(error.response.data)}`);\n      } else {\n        throw new Error(`即梦API请求失败: ${error}`);\n      }\n    }\n  }\n\n  /**\n   * 获取积分信息\n   * @returns 积分信息\n   */\n  public async getCredit(): Promise<Record<string, number>> {\n    const result = await this.request(\n      'POST',\n      '/commerce/v1/benefits/user_credit',\n      {},\n      {},\n      { 'Referer': 'https://jimeng.jianying.com/ai-tool/image/generate' }\n    );\n\n    const credit = result.credit || {};\n    const giftCredit = credit.gift_credit || 0;\n    const purchaseCredit = credit.purchase_credit || 0;\n    const vipCredit = credit.vip_credit || 0;\n\n    return {\n      giftCredit,\n      purchaseCredit,\n      vipCredit,\n      totalCredit: giftCredit + purchaseCredit + vipCredit\n    };\n  }\n\n  /**\n   * 领取积分\n   */\n  public async receiveCredit(): Promise<void> {\n    const credit = await this.request(\n      'POST',\n      '/commerce/v1/benefits/credit_receive',\n      { 'time_zone': 'Asia/Shanghai' },\n      {},\n      { 'Referer': 'https://jimeng.jianying.com/ai-tool/image/generate' }\n    );\n    console.log(\"领取积分\", credit)\n  }\n\n  /**\n   * 即梦AI图像生成（支持批量生成）\n   * @param params 图像生成参数\n   * @returns 生成的图像URL列表\n   */\n  public async generateImage(params: ImageGenerationParams): Promise<string[]> {\n    // 🔍 Debug logging - 记录API类方法调用\n    console.log('🔍 [API Client] generateImage method called');\n    console.log('🔍 [API Client] Token in this instance:', this.refreshToken ? '[PROVIDED]' : '[MISSING]');\n    console.log('🔍 [API Client] Parameters received:', JSON.stringify({\n      filePath: params.filePath,\n      prompt: params.prompt ? `${params.prompt.substring(0, 50)}...` : undefined,\n      model: params.model,\n      aspectRatio: params.aspectRatio,\n      sample_strength: params.sample_strength,\n      negative_prompt: params.negative_prompt\n    }, null, 2));\n    \n    return await this.generateImageWithBatch(params);\n  }\n\n  /**\n   * 批量生成图像，支持自动继续生成\n   * @param params 图像生成参数\n   * @returns 生成的图像URL列表\n   */\n  private async generateImageWithBatch(params: ImageGenerationParams): Promise<string[]> {\n    // 🔍 Debug logging - 记录批量生成方法入口\n    console.log('🔍 [API Client] generateImageWithBatch called');\n    console.log('🔍 [API Client] Full params object:', JSON.stringify(params, null, 2));\n    \n    // 参数验证\n    console.log('🔍 [API Client] Validating parameters...');\n    if (!params.prompt || typeof params.prompt !== 'string') {\n      console.error('🔍 [API Client] Parameter validation failed: prompt is invalid');\n      console.error('🔍 [API Client] prompt value:', params.prompt);\n      console.error('🔍 [API Client] prompt type:', typeof params.prompt);\n      throw new Error('prompt必须是非空字符串');\n    }\n    console.log('🔍 [API Client] Parameter validation passed');\n    \n    const hasFilePath = Boolean(params?.filePath)\n    let uploadID = null\n    if (params?.filePath) {\n      uploadID = await this.uploadCoverFile(params.filePath)\n    }\n    \n    // 获取实际模型\n    const modelName = hasFilePath ? DEFAULT_BLEND_MODEL : params.model || DEFAULT_MODEL;\n    const actualModel = this.getModel(modelName);\n    \n    // 检查积分\n    const creditInfo = await this.getCredit();\n    if (creditInfo.totalCredit <= 0) {\n      await this.receiveCredit();\n    }\n\n    // 第一次生成\n    console.log('🔍 开始第一次图像生成请求...');\n    const firstResult = await this.performSingleGeneration(params, actualModel, modelName, hasFilePath, uploadID);\n    let allResults: string[] = [...firstResult.imageUrls];\n    const historyId = firstResult.historyId;\n    let recordData = firstResult.recordData;\n    \n    if (!historyId) {\n      throw new Error('未能获取历史记录ID');\n    }\n\n    console.log(`🔍 第一次生成完成，获得 ${firstResult.imageUrls.length} 张图片`);\n\n    // 检查轮询过程中是否检测到需要继续生成\n    if (firstResult.needsContinuation) {\n      console.log('🔍 轮询过程中检测到需要继续生成，立即发送继续生成请求');\n      try {\n        const continuationResult = await this.performContinuationGeneration(\n          params, \n          actualModel, \n          modelName, \n          hasFilePath, \n          uploadID, \n          historyId, \n          allResults.length\n        );\n        \n        allResults.push(...continuationResult.imageUrls);\n        recordData = continuationResult.recordData;\n        \n        console.log(`🔍 继续生成完成，新增 ${continuationResult.imageUrls.length} 张图片，总计 ${allResults.length} 张`);\n      } catch (error) {\n        console.error(`🔍 继续生成失败:`, error);\n      }\n    }\n\n    // 检查是否还需要继续生成（用于超过8张图片的情况）\n    let continuationCount = 0;\n    const maxContinuations = 10; // 最多继续生成10次，避免无限循环\n    \n    while (continuationCount < maxContinuations && this.shouldContinueGeneration(recordData, allResults.length)) {\n      continuationCount++;\n      console.log(`🔍 开始第${continuationCount + 1}次继续生成请求...`);\n      \n      try {\n        const continuationResult = await this.performContinuationGeneration(\n          params, \n          actualModel, \n          modelName, \n          hasFilePath, \n          uploadID, \n          historyId, \n          allResults.length\n        );\n        \n        allResults.push(...continuationResult.imageUrls);\n        recordData = continuationResult.recordData;\n        \n        console.log(`🔍 第${continuationCount + 1}次继续生成完成，新增 ${continuationResult.imageUrls.length} 张图片，总计 ${allResults.length} 张`);\n      } catch (error) {\n        console.error(`🔍 第${continuationCount + 1}次继续生成失败:`, error);\n        break;\n      }\n    }\n\n    console.log(`🔍 批量生成完成，总共生成了 ${allResults.length} 张图片`);\n    \n    // 去重处理\n    const deduplicatedResults = this.deduplicateImageUrls(allResults);\n    if (deduplicatedResults.length !== allResults.length) {\n      console.log(`⚠️ 检测到重复图片，已去重: ${allResults.length} -> ${deduplicatedResults.length}`);\n    }\n    \n    return deduplicatedResults;\n  }\n\n  /**\n   * 执行单次生成（第一次请求）\n   */\n  private async performSingleGeneration(\n    params: ImageGenerationParams, \n    actualModel: string, \n    modelName: string, \n    hasFilePath: boolean, \n    uploadID: string | null\n  ): Promise<{ imageUrls: string[], historyId: string | null, recordData: any, needsContinuation: boolean }> {\n    // 使用统一方法构建请求数据\n    const { rqData, rqParams } = this.buildGenerationRequestData(\n      params, actualModel, modelName, hasFilePath, uploadID\n    );\n\n    // 记录完整的提交请求内容\n    console.log('🔍 图像生成请求参数:', JSON.stringify({ \n      requestedModel: modelName,\n      actualModel,\n      rqData: {\n        extend: rqData.extend,\n        draft_content_sample: rqData.draft_content.substring(0, 200) + '...'\n      }\n    }, null, 2));\n\n    // 发送生成请求\n    const result = await this.request(\n      'POST',\n      '/mweb/v1/aigc_draft/generate',\n      rqData,\n      rqParams\n    );\n\n    // 第一次生成不需要增量，传入0作为lastItemCount\n    const pollResult = await this.pollResultWithHistoryExtended(result, 0);\n    const itemList = pollResult.itemList;\n    const recordData = pollResult.recordData;\n    const needsContinuation = pollResult.needsContinuation;\n    \n    // 保存完整的返回数据到文件中以供分析\n    const debugData = {\n      timestamp: new Date().toISOString(),\n      requestedModel: modelName,\n      actualModel,\n      pollResult: itemList,\n      originalResult: result,\n      recordData: recordData\n    };\n    \n    const fs = await import('fs');\n    const debugFileName = `debug-jimeng-response-${modelName}-${Date.now()}.json`;\n    fs.writeFileSync(debugFileName, JSON.stringify(debugData, null, 2));\n    console.log('🔍 完整返回数据已保存到:', debugFileName);\n\n    // 提取图片URL\n    const imageUrls = this.extractImageUrls(itemList);\n    \n    return {\n      imageUrls,\n      historyId: result?.data?.aigc_data?.history_record_id || null,\n      recordData,\n      needsContinuation\n    };\n  }\n\n  /**\n   * 执行继续生成请求\n   */\n  private async performContinuationGeneration(\n    params: ImageGenerationParams, \n    actualModel: string, \n    modelName: string, \n    hasFilePath: boolean, \n    uploadID: string | null,\n    historyId: string,\n    currentItemCount: number = 0\n  ): Promise<{ imageUrls: string[], recordData: any }> {\n    // 使用统一方法构建继续生成请求数据\n    const { rqData, rqParams } = this.buildGenerationRequestData(\n      params, actualModel, modelName, hasFilePath, uploadID, historyId, true\n    );\n\n    console.log('🔍 继续生成请求参数:', JSON.stringify({ \n      action: rqData.action,\n      history_id: rqData.history_id,\n      requestedModel: modelName,\n      actualModel\n    }, null, 2));\n\n    // 发送继续生成请求\n    const result = await this.request(\n      'POST',\n      '/mweb/v1/aigc_draft/generate',\n      rqData,\n      rqParams\n    );\n\n    // 继续生成时传入当前已有的项目数量，实现增量返回\n    const pollResult = await this.pollResultWithHistoryExtended(result, currentItemCount);\n    const itemList = pollResult.itemList;\n    const recordData = pollResult.recordData;\n\n    // 提取图片URL\n    const imageUrls = this.extractImageUrls(itemList);\n    \n    return {\n      imageUrls,\n      recordData\n    };\n  }\n\n  /**\n   * 判断是否需要继续生成\n   */\n  private shouldContinueGeneration(recordData: any, currentCount: number): boolean {\n    if (!recordData) {\n      console.log('🔍 无recordData，停止继续生成');\n      return false;\n    }\n    \n    // 检查是否有未完成的图片数量指示\n    const finishedCount = recordData.finished_image_count || 0;\n    const totalCount = recordData.total_image_count || 0;\n    const taskStatus = recordData.status;\n    const confirmStatus = recordData.confirm_status;\n    \n    console.log(`🔍 生成状态检查: finished_image_count=${finishedCount}, total_image_count=${totalCount}, currentCount=${currentCount}, status=${taskStatus}, confirm_status=${confirmStatus}`);\n    \n    // 如果任务失败，不继续\n    if (taskStatus === 30) {\n      console.log('🔍 任务状态为30（失败），停止继续生成');\n      return false;\n    }\n    \n    // 修复的主要判断条件：只有当totalCount大于4且当前数量小于总数时才继续生成\n    // 这避免了在获得标准4张图片时进行不必要的继续生成请求\n    if (totalCount > 4 && currentCount < totalCount) {\n      console.log(`🔍 需要继续生成: 目标${totalCount}张(>4张)，已获得${currentCount}张`);\n      return true;\n    }\n    \n    // 如果totalCount <= 4，说明是标准生成，不需要继续\n    if (totalCount <= 4) {\n      console.log(`🔍 标准生成完成: 总数${totalCount}张(<=4张)，已获得${currentCount}张，无需继续生成`);\n      return false;\n    }\n    \n    console.log('🔍 所有条件都不满足，停止继续生成');\n    return false;\n  }\n\n\n  /**\n   * 构建通用的生成请求数据\n   * @param params 图像生成参数\n   * @param actualModel 实际模型名称\n   * @param modelName 请求的模型名称\n   * @param hasFilePath 是否有文件路径\n   * @param uploadID 上传文件ID\n   * @param historyId 历史记录ID（继续生成时使用）\n   * @param isContinuation 是否是继续生成请求\n   */\n  private buildGenerationRequestData(\n    params: ImageGenerationParams,\n    actualModel: string,\n    modelName: string,\n    hasFilePath: boolean,\n    uploadID: string | null,\n    historyId?: string,\n    isContinuation: boolean = false\n  ): { rqData: any, rqParams: any } {\n    // 生成组件ID\n    const componentId = generateUuid();\n    \n    // 计算基于宽高比的尺寸\n    console.log('🔍 [API Client] Calculating dimensions for aspectRatio:', params.aspectRatio || 'auto');\n    \n    try {\n      const dimensions = ImageDimensionCalculator.calculateDimensions(params.aspectRatio || 'auto');\n      const { width, height, imageRatio } = dimensions;\n      \n      console.log(`🔍 [API Client] Dimension calculation successful:`);\n      console.log(`🔍 [API Client] - Input aspectRatio: ${params.aspectRatio || 'auto'}`);\n      console.log(`🔍 [API Client] - Calculated width: ${width}`);\n      console.log(`🔍 [API Client] - Calculated height: ${height}`);\n      console.log(`🔍 [API Client] - Calculated imageRatio: ${imageRatio}`);\n    } catch (dimensionError) {\n      console.error('🔍 [API Client] Dimension calculation failed:');\n      console.error('🔍 [API Client] Error:', dimensionError);\n      console.error('🔍 [API Client] aspectRatio value:', params.aspectRatio);\n      throw dimensionError;\n    }\n    \n    const dimensions = ImageDimensionCalculator.calculateDimensions(params.aspectRatio || 'auto');\n    const { width, height, imageRatio } = dimensions;\n    \n    console.log(`🔍 使用宽高比: ${params.aspectRatio || 'auto'}，计算尺寸: ${width}x${height}`);\n\n    let abilities: Record<string, any> = {};\n    if (hasFilePath) {\n      abilities = {\n        \"blend\": {\n          \"type\": \"\",\n          \"id\": generateUuid(),\n          \"min_features\": [],\n          \"core_param\": {\n            \"type\": \"\",\n            \"id\": generateUuid(),\n            \"model\": actualModel,\n            \"prompt\": params.prompt + '##',\n            \"sample_strength\": params.sample_strength || 0.5,\n            \"image_ratio\": imageRatio,\n            \"large_image_info\": {\n              \"type\": \"\",\n              \"id\": generateUuid(),\n              \"height\": height,\n              \"width\": width,\n              \"resolution_type\": getResolutionType(width, height)\n            },\n            \"intelligent_ratio\": false\n          },\n          \"ability_list\": [\n            {\n              \"type\": \"\",\n              \"id\": generateUuid(),\n              \"name\": \"byte_edit\",\n              \"image_uri_list\": [uploadID],\n              \"image_list\": [\n                {\n                  \"type\": \"image\",\n                  \"id\": generateUuid(),\n                  \"source_from\": \"upload\",\n                  \"platform_type\": 1,\n                  \"name\": \"\",\n                  \"image_uri\": uploadID,\n                  \"width\": 0,\n                  \"height\": 0,\n                  \"format\": \"\",\n                  \"uri\": uploadID\n                }\n              ],\n              \"strength\": 0.5\n            }\n          ],\n          \"history_option\": {\n            \"type\": \"\",\n            \"id\": generateUuid(),\n          },\n          \"prompt_placeholder_info_list\": [\n            {\n              \"type\": \"\",\n              \"id\": generateUuid(),\n              \"ability_index\": 0\n            }\n          ],\n          \"postedit_param\": {\n            \"type\": \"\",\n            \"id\": generateUuid(),\n            \"generate_type\": 0\n          }\n        }\n      }\n    } else {\n      abilities = {\n        \"generate\": {\n          \"type\": \"\",\n          \"id\": generateUuid(),\n          \"core_param\": {\n            \"type\": \"\",\n            \"id\": generateUuid(),\n            \"model\": actualModel,\n            \"prompt\": params.prompt,\n            \"negative_prompt\": params.negative_prompt || \"\",\n            \"seed\": Math.floor(Math.random() * 100000000) + 2500000000,\n            \"sample_strength\": params.sample_strength || 0.5,\n            \"image_ratio\": imageRatio,\n            \"large_image_info\": {\n              \"type\": \"\",\n              \"id\": generateUuid(),\n              \"height\": height,\n              \"width\": width,\n              \"resolution_type\": getResolutionType(width, height)\n            },\n            \"intelligent_ratio\": false\n          },\n          \"history_option\": {\n            \"type\": \"\",\n            \"id\": generateUuid(),\n          }\n        }\n      }\n    }\n\n    const baseData: any = {\n      \"extend\": {\n        \"root_model\": actualModel,\n        \"template_id\": \"\",\n      },\n      \"submit_id\": generateUuid(),\n      \"metrics_extra\": hasFilePath ? undefined : jsonEncode({\n        \"templateId\": \"\",\n        \"generateCount\": 1,\n        \"promptSource\": \"custom\",\n        \"templateSource\": \"\",\n        \"lastRequestId\": \"\",\n        \"originRequestId\": \"\",\n      }),\n      \"draft_content\": jsonEncode({\n        \"type\": \"draft\",\n        \"id\": generateUuid(),\n        \"min_version\": DRAFT_VERSION,\n        \"is_from_tsn\": true,\n        \"version\": \"3.2.9\",\n        \"main_component_id\": componentId,\n        \"component_list\": [{\n          \"type\": \"image_base_component\",\n          \"id\": componentId,\n          \"min_version\": DRAFT_VERSION,\n          \"aigc_mode\": \"workbench\",\n          \"metadata\": {\n            \"type\": \"\",\n            \"id\": generateUuid(),\n            \"created_platform\": 3,\n            \"created_platform_version\": \"\",\n            \"created_time_in_ms\": Date.now(),\n            \"created_did\": \"\"\n          },\n          \"generate_type\": hasFilePath ? \"blend\" : \"generate\",\n          \"abilities\": {\n            \"type\": \"\",\n            \"id\": generateUuid(),\n            ...abilities\n          }\n        }]\n      }),\n    };\n\n    // 如果是继续生成请求，添加特有字段\n    if (isContinuation && historyId) {\n      baseData.action = 2;\n      baseData.history_id = historyId;\n    }\n\n    const rqParams = {\n      \"babi_param\": urlEncode(jsonEncode({\n        \"scenario\": \"image_video_generation\",\n        \"feature_key\": hasFilePath ? \"to_image_referenceimage_generate\" : \"aigc_to_image\",\n        \"feature_entrance\": \"to_image\",\n        \"feature_entrance_detail\": hasFilePath ? \"to_image-referenceimage-byte_edit\" : `to_image-${actualModel}`,\n      })),\n      \"aid\": parseInt(DEFAULT_ASSISTANT_ID),\n      \"device_platform\": \"web\",\n      \"region\": \"cn\",\n      \"webId\": WEB_ID,\n      \"web_component_open_flag\": 1\n    };\n\n    return {\n      rqData: baseData,\n      rqParams: rqParams\n    };\n  }\n\n  /**\n   * 构建智能多帧视频生成请求数据\n   */\n  private async buildMultiFrameVideoRequest(params: VideoGenerationParams, actualModel: string): Promise<{ rqData: any, rqParams: any }> {\n    if (!params.multiFrames || params.multiFrames.length === 0) {\n      throw new Error('多帧模式需要提供multiFrames参数');\n    }\n\n    // 验证帧数量限制\n    if (params.multiFrames.length > 10) {\n      throw new Error(`智能多帧最多支持10帧，当前提供了${params.multiFrames.length}帧`);\n    }\n\n    // 验证每个帧的参数\n    for (const frame of params.multiFrames) {\n      if (frame.duration_ms < 1000 || frame.duration_ms > 5000) {\n        throw new Error(`帧${frame.idx}的duration_ms必须在1000-5000ms范围内（1-5秒）`);\n      }\n    }\n\n    // 处理多帧图片上传\n    const processedFrames = [];\n    for (const frame of params.multiFrames) {\n      const uploadID = await this.uploadCoverFile(frame.image_path);\n      processedFrames.push({\n        type: \"\",\n        id: generateUuid(),\n        idx: frame.idx,\n        duration_ms: frame.duration_ms,\n        prompt: frame.prompt,\n        media_info: {\n          type: \"\",\n          id: generateUuid(),\n          media_type: 1,\n          image_info: {\n            type: \"image\",\n            id: generateUuid(),\n            source_from: \"upload\",\n            platform_type: 1,\n            name: \"\",\n            image_uri: uploadID,\n            width: params.width || 864,\n            height: params.height || 1184,\n            format: \"\",\n            uri: uploadID\n          }\n        }\n      });\n    }\n\n    const componentId = generateUuid();\n    const metricsExtra = jsonEncode({\n      \"isDefaultSeed\": 1,\n      \"originSubmitId\": generateUuid(),\n      \"isRegenerate\": false,\n      \"enterFrom\": \"click\",\n      \"functionMode\": \"multi_frame\"\n    });\n\n    const rqParams: {\n      [key: string]: string | number\n    } = {\n      msToken: generateMsToken(),\n      aigc_features: \"app_lip_sync\",\n      web_version: \"6.6.0\",\n      \"da_version\": \"3.2.9\",\n      \"aid\": parseInt(DEFAULT_ASSISTANT_ID),\n      \"device_platform\": \"web\", \n      \"region\": \"cn\",\n      \"webId\": WEB_ID,\n      \"web_component_open_flag\": 1\n    };\n\n    rqParams['a_bogus'] = generate_a_bogus(toUrlParams(rqParams), UA);\n\n    const rqData = {\n      \"extend\": {\n        \"root_model\": actualModel,\n        \"m_video_commerce_info\": {\n          \"benefit_type\": \"basic_video_operation_vgfm_v_three\",\n          \"resource_id\": \"generate_video\", \n          \"resource_id_type\": \"str\",\n          \"resource_sub_type\": \"aigc\"\n        },\n        \"m_video_commerce_info_list\": [{\n          \"benefit_type\": \"basic_video_operation_vgfm_v_three\",\n          \"resource_id\": \"generate_video\",\n          \"resource_id_type\": \"str\", \n          \"resource_sub_type\": \"aigc\"\n        }]\n      },\n      \"submit_id\": generateUuid(),\n      \"metrics_extra\": metricsExtra,\n      \"draft_content\": jsonEncode({\n        \"type\": \"draft\",\n        \"id\": generateUuid(),\n        \"min_version\": \"3.0.5\",\n        \"min_features\": [\"AIGC_GenerateType_VideoMultiFrame\"],\n        \"is_from_tsn\": true,\n        \"version\": \"3.2.9\",\n        \"main_component_id\": componentId,\n        \"component_list\": [{\n          \"type\": \"video_base_component\",\n          \"id\": componentId,\n          \"min_version\": \"1.0.0\",\n          \"aigc_mode\": \"workbench\",\n          \"metadata\": {\n            \"type\": \"\",\n            \"id\": generateUuid(),\n            \"created_platform\": 3,\n            \"created_platform_version\": \"\",\n            \"created_time_in_ms\": Date.now().toString(),\n            \"created_did\": \"\"\n          },\n          \"generate_type\": \"gen_video\",\n          \"abilities\": {\n            \"type\": \"\",\n            \"id\": generateUuid(),\n            \"gen_video\": {\n              \"type\": \"\",\n              \"id\": generateUuid(),\n              \"text_to_video_params\": {\n                \"type\": \"\",\n                \"id\": generateUuid(),\n                \"video_gen_inputs\": [{\n                  \"type\": \"\",\n                  \"id\": generateUuid(),\n                  \"min_version\": \"3.0.5\",\n                  \"prompt\": params.prompt || \"\",\n                  \"video_mode\": 2,\n                  \"fps\": params.fps || 24,\n                  \"duration_ms\": params.duration_ms || 10000,\n                  \"resolution\": params.resolution || \"720p\",\n                  \"multi_frames\": processedFrames\n                }],\n                \"video_aspect_ratio\": params.video_aspect_ratio || \"3:4\",\n                \"seed\": Math.floor(Math.random() * 100000000) + 2500000000,\n                \"model_req_key\": actualModel,\n                \"priority\": 0\n              },\n              \"video_task_extra\": metricsExtra\n            }\n          }\n        }]\n      }),\n      \"http_common_info\": {\n        \"aid\": parseInt(DEFAULT_ASSISTANT_ID)\n      }\n    };\n\n    return {\n      rqData,\n      rqParams\n    };\n  }\n\n  /**\n   * 去重图片URL列表，基于图片ID\n   */\n  private deduplicateImageUrls(urls: string[]): string[] {\n    const seen = new Set<string>();\n    const uniqueUrls: string[] = [];\n    \n    for (const url of urls) {\n      // 提取图片ID（URL中的关键标识符）\n      const match = url.match(/([a-f0-9]{32})/);\n      const imageId = match ? match[1] : url;\n      \n      if (!seen.has(imageId)) {\n        seen.add(imageId);\n        uniqueUrls.push(url);\n      }\n    }\n    \n    console.log(`🔍 去重结果: 原始${urls.length}张 -> 去重后${uniqueUrls.length}张`);\n    return uniqueUrls;\n  }\n\n  /**\n   * 从itemList中提取图片URL\n   */\n  private extractImageUrls(itemList: any[]): string[] {\n    console.log('🔍 itemList 项目数量:', itemList?.length || 0);\n\n    // 提取图片URL - 尝试多种可能的路径\n    const resultList = (itemList || []).map((item, index) => {\n      console.log(`🔍 处理第${index}项:`, JSON.stringify(item, null, 2));\n      \n      // 尝试多种可能的URL路径\n      let imageUrl = item?.image?.large_images?.[0]?.image_url \n                  || item?.common_attr?.cover_url\n                  || item?.image?.url\n                  || item?.image?.image_url\n                  || item?.cover_url\n                  || item?.url;\n      \n      // 如果还是没找到，尝试在嵌套对象中查找\n      if (!imageUrl && item?.image?.large_images) {\n        for (const img of item.image.large_images) {\n          if (img?.image_url || img?.url) {\n            imageUrl = img.image_url || img.url;\n            break;\n          }\n        }\n      }\n      \n      console.log(`🔍 提取到的URL:`, imageUrl);\n      return imageUrl;\n    }).filter(Boolean)\n    \n    console.log('🔍 本轮提取的图片结果:', resultList)\n    return resultList\n  }\n\n\n  /**\n   * 扩展的轮询方法，返回更多详细信息\n   * @param result 初始请求结果\n   * @param lastItemCount 上次轮询时的项目数量，用于增量返回（可选）\n   */\n  async pollResultWithHistoryExtended(result: any, lastItemCount: number = 0): Promise<{ itemList: any[], recordData: any, needsContinuation: boolean }> {\n    // 获取历史记录ID\n    const historyId = result?.data?.aigc_data?.history_record_id;\n    if (!historyId) {\n      if (result?.errmsg) {\n        throw new Error(result.errmsg);\n      } else {\n        throw new Error('记录ID不存在');\n      }\n    }\n\n    // 轮询获取结果\n    let status = 20;\n    let failCode = null;\n    let itemList: any[] = [];\n    let recordData: any = null;\n    let pollCount = 0;\n    let needsContinuation = false; // 是否需要继续生成\n    const maxPollCount = 20; // 最多轮询20次\n\n    console.log('🔍 开始轮询，historyId:', historyId);\n    \n    while ((status === 20 || status === 45 || status === 42) && pollCount < maxPollCount) {\n      pollCount++;\n      // 根据状态码调整等待时间：status=45需要更长等待时间，status=42可能是错误或特殊处理状态\n      let waitTime;\n      if (status === 45) {\n        // status=45可能是排队或处理中，需要更长等待时间\n        waitTime = pollCount === 1 ? 30000 : 10000; // 第一次30秒，后续10秒\n      } else if (status === 42) {\n        // status=42可能是错误或特殊处理状态，适中的等待时间\n        waitTime = pollCount === 1 ? 15000 : 8000; // 第一次15秒，后续8秒\n      } else {\n        // status=20正常处理中\n        waitTime = pollCount === 1 ? 20000 : 5000; // 第一次20秒，后续5秒\n      }\n      \n      console.log(`🔍 轮询第 ${pollCount} 次，状态=${status}，等待 ${waitTime/1000} 秒...`);\n      await new Promise(resolve => setTimeout(resolve, waitTime));\n\n      const result = await this.request(\n        'POST',\n        '/mweb/v1/get_history_by_ids',\n        {\n          \"history_ids\": [historyId],\n          \"image_info\": {\n            \"width\": 2048,\n            \"height\": 2048,\n            \"format\": \"webp\",\n            \"image_scene_list\": [\n              { \"scene\": \"smart_crop\", \"width\": 360, \"height\": 360, \"uniq_key\": \"smart_crop-w:360-h:360\", \"format\": \"webp\" },\n              { \"scene\": \"smart_crop\", \"width\": 480, \"height\": 480, \"uniq_key\": \"smart_crop-w:480-h:480\", \"format\": \"webp\" },\n              { \"scene\": \"smart_crop\", \"width\": 720, \"height\": 720, \"uniq_key\": \"smart_crop-w:720-h:720\", \"format\": \"webp\" },\n              { \"scene\": \"smart_crop\", \"width\": 720, \"height\": 480, \"uniq_key\": \"smart_crop-w:720-h:480\", \"format\": \"webp\" },\n              { \"scene\": \"smart_crop\", \"width\": 360, \"height\": 240, \"uniq_key\": \"smart_crop-w:360-h:240\", \"format\": \"webp\" },\n              { \"scene\": \"smart_crop\", \"width\": 240, \"height\": 320, \"uniq_key\": \"smart_crop-w:240-h:320\", \"format\": \"webp\" },\n              { \"scene\": \"smart_crop\", \"width\": 480, \"height\": 640, \"uniq_key\": \"smart_crop-w:480-h:640\", \"format\": \"webp\" },\n              { \"scene\": \"normal\", \"width\": 2400, \"height\": 2400, \"uniq_key\": \"2400\", \"format\": \"webp\" },\n              { \"scene\": \"normal\", \"width\": 1080, \"height\": 1080, \"uniq_key\": \"1080\", \"format\": \"webp\" },\n              { \"scene\": \"normal\", \"width\": 720, \"height\": 720, \"uniq_key\": \"720\", \"format\": \"webp\" },\n              { \"scene\": \"normal\", \"width\": 480, \"height\": 480, \"uniq_key\": \"480\", \"format\": \"webp\" },\n              { \"scene\": \"normal\", \"width\": 360, \"height\": 360, \"uniq_key\": \"360\", \"format\": \"webp\" }\n            ]\n          },\n          \"http_common_info\": {\n            \"aid\": parseInt(DEFAULT_ASSISTANT_ID)\n          }\n        }\n      );\n\n      const record = result?.data?.[historyId];\n      if (!record) {\n        throw new Error('记录不存在');\n      }\n      status = record.status;\n      failCode = record.fail_code;\n      recordData = record; // 保存完整的记录数据\n\n      console.log(`🔍 轮询状态: status=${status}, failCode=${failCode}, itemList长度=${record.item_list?.length || 0}`);\n      console.log(`🔍 详细状态: total_image_count=${record.total_image_count}, finished_image_count=${record.finished_image_count}, confirm_status=${record.confirm_status}`);\n\n      // 检测是否需要继续生成：当total_image_count > 4时\n      const totalCount = record.total_image_count || 0;\n      if (totalCount > 4 && !needsContinuation) {\n        console.log('🔍 检测到需要生成超过4张图片，标记需要继续生成');\n        needsContinuation = true;\n      }\n\n      if (status === 30) {\n        if (failCode === '2038') {\n          throw new Error('内容被过滤');\n        }\n        throw new Error('生成失败');\n      }\n      \n      // 检查是否本轮生成完成：等待达到批次大小或特定状态\n      if (record.item_list && record.item_list.length > 0) {\n        const currentItemList = record.item_list as any[];\n        const finishedCount = record.finished_image_count || 0;\n        const totalCount = record.total_image_count || 0;\n        \n        console.log(`🔍 当前状态检查: item_list长度=${currentItemList.length}, finished_count=${finishedCount}, total_count=${totalCount}, status=${status}`);\n        \n        // 检测是否为视频生成（通过finished_image_count和total_image_count都为0来判断）\n        const isVideoGeneration = finishedCount === 0 && totalCount === 0 && currentItemList.length > 0;\n        \n        if (isVideoGeneration) {\n          console.log(`🔍 检测到视频生成模式: status=${status}, itemList长度=${currentItemList.length}`);\n        }\n        \n        // 按照用户指导修改判断逻辑：等待合适的条件才提取URL\n        const isBatchComplete = \n          // 视频生成完成条件：status=50且有itemList项目\n          (isVideoGeneration && status === 50 && currentItemList.length > 0) ||\n          // 条件1: 达到了一个批次的大小（4张图片），且状态稳定\n          (currentItemList.length >= 4 && status !== 20 && status !== 45 && status !== 42) ||\n          // 条件2: finished_image_count达到了total_image_count（全部完成）\n          (totalCount > 0 && finishedCount >= totalCount) ||\n          // 条件3: 对于小批次（<=4张），等待所有状态指示完成\n          (totalCount > 0 && totalCount <= 4 && finishedCount >= totalCount && status !== 20) ||\n          // 条件4: 当检测到需要继续生成且已达到批次上限（4张）时，立即完成当前批次\n          (needsContinuation && currentItemList.length >= 4 && finishedCount >= 4);\n          \n        if (isBatchComplete) {\n          // 实现增量返回：只返回新增的图片项目\n          const incrementalItems = currentItemList.slice(lastItemCount);\n          \n          console.log('🔍 本轮生成完成，返回结果');\n          console.log(`🔍 总项目数: ${currentItemList.length}, 上次数量: ${lastItemCount}, 新增项目: ${incrementalItems.length}`);\n          console.log(`🔍 完成条件: item_list长度=${currentItemList.length}, finished=${finishedCount}, total=${totalCount}, status=${status}`);\n          \n          return { itemList: incrementalItems, recordData, needsContinuation };\n        } else {\n          console.log('🔍 本轮生成未完成，继续轮询...');\n          console.log(`🔍 等待条件: item_list长度=${currentItemList.length}, finished=${finishedCount}, total=${totalCount}, status=${status}`);\n        }\n      }\n      \n      // 如果状态不再是处理中，但也没有结果，可能需要继续轮询其他状态\n      if (status !== 20 && status !== 45) {\n        console.log(`🔍 遇到新状态 ${status}，继续轮询...`);\n      }\n    }\n    \n    if (pollCount >= maxPollCount) {\n      console.log('🔍 轮询超时，但状态仍为20，返回空数组');\n    }\n    return { itemList: [], recordData, needsContinuation }\n  }\n\n  async pollResultWithHistory(result: any): Promise<any[]> {\n    const extendedResult = await this.pollResultWithHistoryExtended(result, 0);\n    return extendedResult.itemList;\n  }\n  /**\n  * 获取上传凭证所需Ak和Tk\n  */\n  private async getUploadAuth(): Promise<any> {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const authRes = await this.request(\n          'POST',\n          '/mweb/v1/get_upload_token?aid=513695&da_version=3.2.2&aigc_features=app_lip_sync',\n          {\n            scene: 2\n          },\n          {},\n        );\n        if (\n          !authRes.data\n        ) {\n          reject(authRes.errmsg ?? '获取上传凭证失败,账号可能已掉线!');\n          return;\n        }\n        resolve(authRes.data);\n      } catch (err) {\n        console.error('获取上传凭证失败:', err);\n        reject(err);\n      }\n    });\n  }\n\n  public async getFileContent(filePath: string): Promise<Buffer> {\n    try {\n      if (filePath.includes('https://') || filePath.includes('http://')) {\n        // 直接用axios获取图片Buffer\n        const res = await axios.get(filePath, { responseType: 'arraybuffer' });\n        return Buffer.from(res.data);\n      } else {\n        // 确保路径是绝对路径\n        const absolutePath = path.resolve(filePath);\n        // 读取文件内容\n        return await fs.promises.readFile(absolutePath);\n      }\n    } catch (error) {\n      console.error('Failed to read file:', error);\n      throw new Error(`读取文件失败: filePath`);\n    }\n  }\n\n  private generateRandomString(length: number): string {\n    let result = '';\n    const characters = 'abcdefghijklmnopqrstuvwxyz0123456789';\n    const charactersLength = characters.length;\n    for (let i = 0; i < length; i++) {\n      result += characters.charAt(Math.floor(Math.random() * charactersLength));\n    }\n    return result;\n  }\n\n  /**\n  * 生成请求所需Header\n  */\n  private addHeaders(\n    amzDate: string,\n    sessionToken: string,\n    requestBody: any,\n  ): any {\n    const headers = {\n      'X-Amz-Date': amzDate,\n      'X-Amz-Security-Token': sessionToken,\n    };\n    if (Object.keys(requestBody).length > 0) {\n      // @ts-ignore\n      headers['X-Amz-Content-Sha256'] = crypto\n        .createHash('sha256')\n        .update(JSON.stringify(requestBody))\n        .digest('hex');\n    }\n    return headers;\n  }\n\n  /**\n   * 生成请求所需Header\n   */\n  private async generateAuthorizationAndHeader(\n    accessKeyID: string,\n    secretAccessKey: string,\n    sessionToken: string,\n    region: string,\n    service: string,\n    requestMethod: string,\n    requestParams: any,\n    requestBody: any = {},\n  ): Promise<any> {\n    return new Promise((resolve) => {\n      // 获取当前ISO时间\n      const now = new Date();\n      const amzDate = now.toISOString().replace(/[:\\-]|\\.\\d{3}/g, '').slice(0, 15) + 'Z';\n\n      // 生成请求的Header\n      const requestHeaders: Record<string, string> = this.addHeaders(\n        amzDate,\n        sessionToken,\n        requestBody,\n      )\n\n      if (Object.keys(requestBody).length > 0) {\n        // @ts-ignore\n        requestHeaders['X-Amz-Content-Sha256'] = crypto\n          .createHash('sha256')\n          .update(JSON.stringify(requestBody))\n          .digest('hex')\n      }\n      // 生成请求的Authorization\n      const authorizationParams = [\n        'AWS4-HMAC-SHA256 Credential=' + accessKeyID + '/' +\n        this.credentialString(amzDate, region, service),\n        'SignedHeaders=' + this.signedHeaders(requestHeaders),\n        'Signature=' + this.signature(\n          secretAccessKey,\n          amzDate,\n          region,\n          service,\n          requestMethod,\n          requestParams,\n          requestHeaders,\n          requestBody,\n        ),\n      ];\n      const authorization = authorizationParams.join(', ');\n\n      // 返回Headers\n      const headers: any = {};\n      for (const key in requestHeaders) {\n        headers[key] = requestHeaders[key];\n      }\n      headers['Authorization'] = authorization;\n      resolve(headers);\n    });\n  }\n\n  /**\n   * 获取credentialString\n   */\n  private credentialString(\n    amzDate: string,\n    region: string,\n    service: string,\n  ): string {\n    const credentialArr = [\n      amzDate.substring(0, 8),\n      region,\n      service,\n      'aws4_request',\n    ];\n    return credentialArr.join('/');\n  }\n\n  /**\n   * 生成http请求参数字符串\n   */\n  private httpBuildQuery(params: any): string {\n    const searchParams = new URLSearchParams();\n    for (const key in params) {\n      if (params?.hasOwnProperty(key)) {\n        searchParams.append(key, params[key]);\n      }\n    }\n    return searchParams.toString();\n  }\n\n  private signedHeaders(requestHeaders: any): string {\n    const headers: string[] = [];\n    Object.keys(requestHeaders).forEach(function (r) {\n      r = r.toLowerCase();\n      headers.push(r);\n    });\n    return headers.sort().join(';');\n  }\n\n\n  /**\n   * 生成canonicalString\n   */\n  private canonicalString(\n    requestMethod: string,\n    requestParams: any,\n    requestHeaders: any,\n    requestBody: any,\n  ): string {\n    let canonicalHeaders: string[] = [];\n    const headerKeys = Object.keys(requestHeaders).sort();\n    for (let i = 0; i < headerKeys.length; i++) {\n      canonicalHeaders.push(\n        headerKeys[i].toLowerCase() + ':' + requestHeaders[headerKeys[i]],\n      );\n    }\n    // @ts-ignore\n    canonicalHeaders = canonicalHeaders.join('\\n') + '\\n';\n    let body = '';\n    if (Object.keys(requestBody).length > 0) {\n      body = JSON.stringify(requestBody);\n    }\n\n    const canonicalStringArr = [\n      requestMethod.toUpperCase(),\n      '/',\n      this.httpBuildQuery(requestParams),\n      canonicalHeaders,\n      this.signedHeaders(requestHeaders),\n      crypto.createHash('sha256').update(body).digest('hex'),\n    ];\n    return canonicalStringArr.join('\\n');\n  }\n\n  private signature(\n    secretAccessKey: string,\n    amzDate: string,\n    region: string,\n    service: string,\n    requestMethod: string,\n    requestParams: any,\n    requestHeaders: any,\n    requestBody: any,\n  ): string {\n    // 生成signingKey\n    const amzDay = amzDate.substring(0, 8);\n    const kDate = crypto\n      .createHmac('sha256', 'AWS4' + secretAccessKey)\n      .update(amzDay)\n      .digest();\n    const kRegion = crypto.createHmac('sha256', kDate).update(region).digest();\n    const kService = crypto\n      .createHmac('sha256', kRegion)\n      .update(service)\n      .digest();\n    const signingKey = crypto\n      .createHmac('sha256', kService)\n      .update('aws4_request')\n      .digest();\n\n    // 生成StringToSign\n    const stringToSignArr = [\n      'AWS4-HMAC-SHA256',\n      amzDate,\n      this.credentialString(amzDate, region, service),\n      crypto\n        .createHash('sha256')\n        .update(\n          this.canonicalString(\n            requestMethod,\n            requestParams,\n            requestHeaders,\n            requestBody,\n          ),\n        )\n        .digest('hex'),\n    ];\n    const stringToSign = stringToSignArr.join('\\n');\n    return crypto\n      .createHmac('sha256', signingKey)\n      .update(stringToSign)\n      .digest('hex');\n  }\n\n  /**\n   * 上传文件到远程服务器\n   * @param url 上传地址\n   * @param fileContent 文件内容\n   * @param headers 请求头\n   * @param method HTTP 方法\n   * @param proxy\n   */\n  private async uploadFile(\n    url: string,\n    fileContent: Buffer,\n    headers: any,\n    method: string = 'PUT',\n  ): Promise<any> {\n    return new Promise(async (resolve, reject) => {\n      const res = await this.request(\n        'POST',\n        url,\n        fileContent,\n        {},\n        headers\n      );\n      resolve(res);\n    });\n  }\n\n  /**\n   * 上传文件\n   */\n  private async uploadCoverFile(\n    filePath: string,\n  ): Promise<string> {\n    return new Promise(async (resolve, reject) => {\n      try {\n        console.log('开始上传文件:', filePath);\n        // 获取上传令牌所需Ak和Tk\n        const uploadAuth = await this.getUploadAuth();\n\n        // 获取图片数据\n        const imageRes = await this.getFileContent(filePath);\n        // 获取图片Crc32标识\n        const imageCrc32 = crc32(imageRes).toString(16);\n        // 获取图片上传凭证签名所需参数\n        const getUploadImageProofRequestParams = {\n          Action: 'ApplyImageUpload',\n          FileSize: imageRes.length,\n          ServiceId: 'tb4s082cfz',\n          Version: '2018-08-01',\n          s: this.generateRandomString(11),\n        };\n\n        // 获取图片上传请求头\n        const requestHeadersInfo = await this.generateAuthorizationAndHeader(\n          uploadAuth.access_key_id,\n          uploadAuth.secret_access_key,\n          uploadAuth.session_token,\n          'cn-north-1',\n          'imagex',\n          'GET',\n          getUploadImageProofRequestParams,\n        );\n\n\n        // 获取图片上传凭证\n        const uploadImgRes = await this.request(\n          'GET',\n          this.getUploadImageProofUrl + '?' +\n          this.httpBuildQuery(getUploadImageProofRequestParams),\n          {},\n          {},\n          requestHeadersInfo\n        );\n\n        if (uploadImgRes?.['Response  ']?.hasOwnProperty('Error')) {\n          reject(uploadImgRes['Response ']['Error']['Message']);\n          return;\n        }\n\n        const UploadAddress = uploadImgRes.Result.UploadAddress;\n        // 用凭证拼接上传图片接口\n        const uploadImgUrl = `https://${UploadAddress.UploadHosts[0]}/upload/v1/${UploadAddress.StoreInfos[0].StoreUri}`;\n\n        // 上传图片\n        const imageUploadRes = await this.uploadFile(\n          uploadImgUrl,\n          imageRes,\n          {\n            Authorization: UploadAddress.StoreInfos[0].Auth,\n            'Content-Crc32': imageCrc32,\n            'Content-Type': 'application/octet-stream',\n            // 'X-Storage-U': '3674996648187204',\n          },\n          'POST',\n        );\n\n\n        if (imageUploadRes.code !== 2000) {\n          reject(imageUploadRes.message);\n          return;\n        }\n\n        const commitImgParams = {\n          Action: 'CommitImageUpload',\n          FileSize: imageRes.length,\n          ServiceId: 'tb4s082cfz',\n          Version: '2018-08-01',\n          // user_id: userUid,\n        };\n\n        const commitImgContent = {\n          SessionKey: UploadAddress.SessionKey,\n        };\n\n        const commitImgHead = await this.generateAuthorizationAndHeader(\n          uploadAuth.access_key_id,\n          uploadAuth.secret_access_key,\n          uploadAuth.session_token,\n          'cn-north-1',\n          'imagex',\n          'POST',\n          commitImgParams,\n          commitImgContent,\n        );\n\n        // 提交图片上传\n        const commitImg = await this.request(\n          'POST',\n          this.getUploadImageProofUrl +\n          '?' +\n          this.httpBuildQuery(commitImgParams),\n          commitImgContent,\n          {},\n          {\n            ...commitImgHead,\n            'Content-Type': 'application/json',\n          }\n        );\n\n        if (commitImg['Response ']?.hasOwnProperty('Error')) {\n          reject(commitImg['Response  ']['Error']['Message']);\n          return;\n        }\n\n\n        resolve(commitImg.Result.Results[0].Uri);\n      } catch (err: any) {\n        console.error('上传文件失败:', err);\n        const errorMessage = err?.message || err || '未知';\n        reject('上传失败,失败原因:' + errorMessage);\n      }\n    });\n  }\n\n  /**\n   * 生成智能多帧视频\n   */\n  private async generateMultiFrameVideo(params: VideoGenerationParams, actualModel: string): Promise<string> {\n    console.log('🔍 开始智能多帧视频生成...');\n    \n    // 使用多帧请求构建器\n    const { rqData, rqParams } = await this.buildMultiFrameVideoRequest(params, actualModel);\n    \n    console.log('🔍 多帧视频生成请求参数:', {\n      model: actualModel,\n      frameCount: params.multiFrames?.length,\n      aspectRatio: params.video_aspect_ratio,\n      duration: params.duration_ms\n    });\n    \n    // 发送生成请求\n    const result = await this.request(\n      'POST',\n      '/mweb/v1/aigc_draft/generate',\n      rqData,\n      rqParams\n    );\n\n    // 使用扩展的轮询方法来获取详细数据\n    const pollResult = await this.pollResultWithHistoryExtended(result, 0);\n    const itemList = pollResult.itemList;\n    \n    // 保存完整的视频返回数据到文件中以供分析\n    const debugData = {\n      timestamp: new Date().toISOString(),\n      requestType: 'multiframe-video',\n      actualModel,\n      pollResult: itemList,\n      originalResult: result,\n      recordData: pollResult.recordData\n    };\n    \n    const fs = await import('fs');\n    const debugFileName = `debug-jimeng-video-response-${Date.now()}.json`;\n    fs.writeFileSync(debugFileName, JSON.stringify(debugData, null, 2));\n    console.log('🔍 完整视频返回数据已保存到:', debugFileName);\n    \n    // 尝试多种可能的视频URL路径\n    let videoUrl;\n    if (itemList && itemList.length > 0) {\n      const item = itemList[0];\n      console.log('🔍 检查视频数据结构 keys:', Object.keys(item || {}));\n      \n      // 尝试不同的URL路径\n      videoUrl = item?.video?.transcoded_video?.origin?.video_url ||\n                item?.video?.video_url ||\n                item?.video?.origin?.video_url ||\n                item?.common_attr?.cover_url ||\n                item?.aigc_video_params?.video_url ||\n                item?.url ||\n                item?.video_url;\n      \n      console.log('🔍 尝试的URL路径结果:', {\n        'video?.transcoded_video?.origin?.video_url': item?.video?.transcoded_video?.origin?.video_url,\n        'video?.video_url': item?.video?.video_url,\n        'video?.origin?.video_url': item?.video?.origin?.video_url,\n        'common_attr?.cover_url': item?.common_attr?.cover_url,\n        'aigc_video_params?.video_url': item?.aigc_video_params?.video_url,\n        'url': item?.url,\n        'video_url': item?.video_url\n      });\n      \n      // 如果还没有找到URL，尝试深度遍历\n      if (!videoUrl && item?.video) {\n        console.log('🔍 深度检查 video 对象 keys:', Object.keys(item.video || {}));\n        if (item.video.transcoded_video) {\n          console.log('🔍 检查 transcoded_video keys:', Object.keys(item.video.transcoded_video || {}));\n        }\n      }\n    } else {\n      console.log('🔍 警告: itemList为空或长度为0');\n    }\n    \n    console.log('🔍 多帧视频生成结果:', videoUrl);\n    return videoUrl;\n  }\n\n  async generateVideo(params: VideoGenerationParams): Promise<string> {\n    if (!params.prompt || typeof params.prompt !== 'string') {\n      throw new Error('prompt必须是非空字符串');\n    }\n    \n    // 检测是否为多帧模式\n    const isMultiFrameMode = params.multiFrames && params.multiFrames.length > 0;\n    const modelName = params.model || (isMultiFrameMode ? 'jimeng-video-multiframe' : DEFAULT_VIDEO_MODEL);\n    const actualModel = this.getModel(modelName);\n    \n    console.log(`🔍 视频生成模式: ${isMultiFrameMode ? '智能多帧' : '传统模式'}`);\n    console.log(`🔍 使用模型: ${modelName} -> ${actualModel}`);\n    \n    // 检查积分\n    const creditInfo = await this.getCredit();\n    if (creditInfo.totalCredit <= 0) {\n      await this.receiveCredit();\n    }\n    \n    // 根据模式选择不同的处理逻辑\n    if (isMultiFrameMode) {\n      return this.generateMultiFrameVideo(params, actualModel);\n    }\n    \n    // 传统单帧/首尾帧模式的处理逻辑保持不变\n    let first_frame_image = undefined\n    let end_frame_image = undefined\n    if (params?.filePath) {\n      let uploadIDs: any[] = []\n      for (const item of params.filePath) {\n        const uploadID = await this.uploadCoverFile(item)\n        uploadIDs.push(uploadID)\n      }\n      if (uploadIDs[0]) {\n        first_frame_image = {\n          format: \"\",\n          height: params.height || 1024,\n          id: generateUuid(),\n          image_uri: uploadIDs[0],\n          name: \"\",\n          platform_type: 1,\n          source_from: \"upload\",\n          type: \"image\",\n          uri: uploadIDs[0],\n          width: params.width || 1024,\n        }\n      }\n      if (uploadIDs[1]) {\n        end_frame_image = {\n          format: \"\",\n          height: params.height || 1024,\n          id: generateUuid(),\n          image_uri: uploadIDs[1],\n          name: \"\",\n          platform_type: 1,\n          source_from: \"upload\",\n          type: \"image\",\n          uri: uploadIDs[1],\n          width: params.width || 1024,\n        }\n      }\n      if (!first_frame_image && !end_frame_image) {\n        throw new Error('上传封面图片失败，请检查图片路径是否正确');\n      }\n    }\n    const componentId = generateUuid();\n    const metricsExtra = jsonEncode({\n      \"enterFrom\": \"click\",\n      \"isDefaultSeed\": 1,\n      \"promptSource\": \"custom\",\n      \"isRegenerate\": false,\n      \"originSubmitId\": generateUuid(),\n    })\n    const rqParams: {\n      [key: string]: string | number\n    } = {\n      msToken: generateMsToken(),\n      aigc_features: \"app_lip_sync\",\n      web_version: \"6.6.0\",\n      \"da_version\": \"3.2.9\",\n      \"aid\": parseInt(DEFAULT_ASSISTANT_ID),\n      \"device_platform\": \"web\",\n      \"region\": \"cn\",\n      \"webId\": WEB_ID,\n      \"web_component_open_flag\": 1\n    }\n    rqParams['a_bogus'] = generate_a_bogus(toUrlParams(rqParams), UA)\n    const rqData = {\n      \"extend\": {\n        \"root_model\": end_frame_image ? MODEL_MAP['jimeng-video-3.0'] : actualModel,\n        \"m_video_commerce_info\": {\n          benefit_type: \"basic_video_operation_vgfm_v_three\",\n          resource_id: \"generate_video\",\n          resource_id_type: \"str\",\n          resource_sub_type: \"aigc\"\n        },\n        \"m_video_commerce_info_list\": [{\n          benefit_type: \"basic_video_operation_vgfm_v_three\",\n          resource_id: \"generate_video\",\n          resource_id_type: \"str\",\n          resource_sub_type: \"aigc\"\n        }]\n      },\n      \"submit_id\": generateUuid(),\n      \"metrics_extra\": metricsExtra,\n      \"draft_content\": jsonEncode({\n        \"type\": \"draft\",\n        \"id\": generateUuid(),\n        \"min_version\": \"3.0.5\",\n        \"is_from_tsn\": true,\n        \"version\": \"3.2.8\",\n        \"main_component_id\": componentId,\n        \"component_list\": [{\n          \"type\": \"video_base_component\",\n          \"id\": componentId,\n          \"min_version\": \"1.0.0\",\n          \"metadata\": {\n            \"type\": \"\",\n            \"id\": generateUuid(),\n            \"created_platform\": 3,\n            \"created_platform_version\": \"\",\n            \"created_time_in_ms\": Date.now(),\n            \"created_did\": \"\"\n          },\n          \"generate_type\": \"gen_video\",\n          \"aigc_mode\": \"workbench\",\n          \"abilities\": {\n            \"type\": \"\",\n            \"id\": generateUuid(),\n            \"gen_video\": {\n              \"id\": generateUuid(),\n              \"type\": \"\",\n              \"text_to_video_params\": {\n                \"type\": \"\",\n                \"id\": generateUuid(),\n                \"model_req_key\": actualModel,\n                \"priority\": 0,\n                \"seed\": Math.floor(Math.random() * 100000000) + 2500000000,\n                \"video_aspect_ratio\": \"1:1\",\n                \"video_gen_inputs\": [{\n                  duration_ms: 5000,\n                  first_frame_image: first_frame_image,\n                  end_frame_image: end_frame_image,\n                  fps: 24,\n                  id: generateUuid(),\n                  min_version: \"3.0.5\",\n                  prompt: params.prompt,\n                  resolution: params.resolution || \"720p\",\n                  type: \"\",\n                  video_mode: 2\n                }]\n              },\n              \"video_task_extra\": metricsExtra,\n            }\n          }\n        }],\n      }),\n    }\n    // 发送生成请求\n    const result = await this.request(\n      'POST',\n      '/mweb/v1/aigc_draft/generate',\n      rqData,\n      rqParams\n    );\n\n    const itemList = await this.pollResultWithHistory(result);\n    const videoUrl = itemList?.[0]?.video?.transcoded_video?.origin?.video_url\n    console.log('生成视频结果:', videoUrl);\n\n    return videoUrl;\n  }\n\n  /**\n   * 视频补帧方法 - 将低帧率视频提升至30fps或60fps\n   * \n   * 功能说明：\n   * - 对已生成的视频进行帧插值处理，提升视频播放流畅度\n   * - 支持24fps→30fps或24fps→60fps的帧率提升\n   * - 使用AI技术生成中间帧，保持视频内容连贯性\n   * \n   * @param params 补帧参数\n   * @param params.videoId 原始视频ID\n   * @param params.originHistoryId 原始生成历史ID\n   * @param params.targetFps 目标帧率，支持30或60\n   * @param params.originFps 原始视频帧率\n   * @param params.duration 视频时长（毫秒），可选\n   * @returns 处理后的高帧率视频URL\n   */\n  async frameInterpolation(params: FrameInterpolationParams): Promise<string> {\n    console.log('🎬 开始视频补帧处理...');\n    console.log(`📋 补帧参数: ${params.originFps}fps -> ${params.targetFps}fps`);\n    \n    // 检查积分\n    const creditInfo = await this.getCredit();\n    if (creditInfo.totalCredit <= 0) {\n      await this.receiveCredit();\n    }\n\n    // 生成基础参数\n    const submitId = generateUuid();\n    const modelKey = this.getModel('jimeng-video-multiframe');\n    const metricsExtra = JSON.stringify({\n      promptSource: \"custom\",\n      isDefaultSeed: 1,\n      originSubmitId: submitId,\n      enterFrom: \"click\",\n      isRegenerate: false,\n      functionMode: \"multi_frame\"\n    });\n\n    const draftContent = {\n      type: \"draft\",\n      id: generateUuid(),\n      min_version: \"3.1.0\",\n      min_features: [\"AIGC_GenerateType_VideoInsertFrame\", \"AIGC_GenerateType_VideoMultiFrame\"],\n      is_from_tsn: true,\n      version: \"3.2.9\",\n      main_component_id: generateUuid(),\n      component_list: [{\n        type: \"video_base_component\",\n        id: generateUuid(),\n        min_version: \"1.0.0\",\n        aigc_mode: \"workbench\",\n        metadata: {\n          type: \"\",\n          id: generateUuid(),\n          created_platform: 3,\n          created_platform_version: \"\",\n          created_time_in_ms: Date.now().toString(),\n          created_did: \"\"\n        },\n        generate_type: \"gen_video\",\n        abilities: {\n          type: \"\",\n          id: generateUuid(),\n          gen_video: {\n            type: \"\",\n            id: generateUuid(),\n            text_to_video_params: {\n              type: \"\",\n              id: generateUuid(),\n              video_gen_inputs: [{\n                type: \"\",\n                id: generateUuid(),\n                min_version: \"3.0.5\",\n                prompt: \"视频补帧处理\",\n                lens_motion_type: \"\",\n                motion_speed: \"\",\n                vid: params.videoId,\n                video_mode: 2,\n                fps: params.originFps,\n                duration_ms: params.duration || 10000,\n                template_id: 0,\n                v2v_opt: {\n                  type: \"\",\n                  id: generateUuid(),\n                  min_version: \"3.1.0\",\n                  insert_frame: {\n                    type: \"\",\n                    id: generateUuid(),\n                    enable: true,\n                    target_fps: params.targetFps,\n                    origin_fps: params.originFps,\n                    duration_ms: params.duration || 10000\n                  }\n                },\n                origin_history_id: params.originHistoryId,\n                resolution: \"720p\"\n              }]\n            },\n            scene: \"insert_frame\",\n            video_task_extra: metricsExtra,\n            video_ref_params: {\n              type: \"\",\n              id: generateUuid(),\n              generate_type: 0,\n              item_id: parseInt(params.videoId.replace('v', '')),\n              origin_history_id: params.originHistoryId\n            }\n          },\n          process_type: 3\n        }\n      }]\n    };\n\n    const requestData = {\n      extend: {\n        root_model: modelKey,\n        m_video_commerce_info: {\n          benefit_type: \"video_frame_interpolation\",\n          resource_id: \"generate_video\",\n          resource_id_type: \"str\",\n          resource_sub_type: \"aigc\"\n        },\n        m_video_commerce_info_list: [{\n          benefit_type: \"video_frame_interpolation\", \n          resource_id: \"generate_video\",\n          resource_id_type: \"str\",\n          resource_sub_type: \"aigc\"\n        }]\n      },\n      submit_id: submitId,\n      metrics_extra: metricsExtra,\n      draft_content: JSON.stringify(draftContent),\n      http_common_info: { aid: 513695 }\n    };\n\n    // 构建请求参数\n    const rqParams: any = {\n      \"babi_param\": urlEncode(jsonEncode({\n        \"scenario\": \"image_video_generation\",\n        \"feature_key\": \"aigc_to_video\", \n        \"feature_entrance\": \"to_video\",\n        \"feature_entrance_detail\": \"to_video-jimeng-video-multiframe\"\n      })),\n      \"aid\": parseInt(DEFAULT_ASSISTANT_ID),\n      \"device_platform\": \"web\",\n      \"region\": \"cn\",\n      \"webId\": WEB_ID,\n      \"web_component_open_flag\": 1\n    };\n    rqParams['a_bogus'] = generate_a_bogus(toUrlParams(rqParams), UA);\n\n    // 发送补帧请求\n    const result = await this.request(\n      'POST',\n      '/mweb/v1/aigc_draft/generate',\n      requestData,\n      rqParams\n    );\n\n    console.log('🔍 开始轮询补帧结果...');\n    const pollResult = await this.pollResultWithHistoryExtended(result);\n    const itemList = pollResult.itemList;\n    \n    // 提取视频URL\n    let videoUrl;\n    if (itemList && itemList.length > 0) {\n      const item = itemList[0];\n      videoUrl = item?.video?.transcoded_video?.origin?.video_url ||\n                item?.video?.video_url ||\n                item?.common_attr?.cover_url;\n    }\n\n    console.log('🎬 补帧处理完成:', videoUrl);\n    return videoUrl;\n  }\n\n  /**\n   * 视频分辨率提升方法 - 将低分辨率视频提升至更高分辨率\n   * \n   * 功能说明：\n   * - 对已生成的视频进行超分辨率处理，提升视频画质和清晰度\n   * - 支持将视频分辨率提升至原来的2倍或更高（如704x1248 → 1408x2496）\n   * - 使用AI技术重建视频细节，保持画面质量和内容完整性\n   * \n   * @param params 分辨率提升参数\n   * @param params.videoId 原始视频ID\n   * @param params.originHistoryId 原始生成历史ID  \n   * @param params.targetWidth 目标宽度\n   * @param params.targetHeight 目标高度\n   * @param params.originWidth 原始宽度\n   * @param params.originHeight 原始高度\n   * @returns 处理后的高分辨率视频URL\n   */\n  async superResolution(params: SuperResolutionParams): Promise<string> {\n    console.log('🎨 开始视频分辨率提升处理...');\n    console.log(`📋 分辨率提升: ${params.originWidth}x${params.originHeight} -> ${params.targetWidth}x${params.targetHeight}`);\n    \n    // 检查积分\n    const creditInfo = await this.getCredit();\n    if (creditInfo.totalCredit <= 0) {\n      await this.receiveCredit();\n    }\n\n    // 生成基础参数\n    const submitId = generateUuid();\n    const modelKey = this.getModel('jimeng-video-multiframe');\n    const metricsExtra = JSON.stringify({\n      promptSource: \"custom\",\n      isDefaultSeed: 1,\n      originSubmitId: submitId,\n      enterFrom: \"click\",\n      isRegenerate: false,\n      functionMode: \"multi_frame\"\n    });\n\n    const draftContent = {\n      type: \"draft\",\n      id: generateUuid(),\n      min_version: \"3.1.0\",\n      min_features: [\"AIGC_GenerateType_VideoSuperResolution\", \"AIGC_GenerateType_VideoMultiFrame\"],\n      is_from_tsn: true,\n      version: \"3.2.9\",\n      main_component_id: generateUuid(),\n      component_list: [{\n        type: \"video_base_component\",\n        id: generateUuid(),\n        min_version: \"1.0.0\",\n        aigc_mode: \"workbench\",\n        metadata: {\n          type: \"\",\n          id: generateUuid(),\n          created_platform: 3,\n          created_platform_version: \"\",\n          created_time_in_ms: Date.now().toString(),\n          created_did: \"\"\n        },\n        generate_type: \"gen_video\",\n        abilities: {\n          type: \"\",\n          id: generateUuid(),\n          gen_video: {\n            type: \"\",\n            id: generateUuid(),\n            text_to_video_params: {\n              type: \"\",\n              id: generateUuid(),\n              video_gen_inputs: [{\n                type: \"\",\n                id: generateUuid(),\n                min_version: \"3.0.5\",\n                prompt: \"视频分辨率提升处理\",\n                lens_motion_type: \"\",\n                motion_speed: \"\",\n                vid: params.videoId,\n                video_mode: 2,\n                fps: 24,\n                duration_ms: 10000,\n                template_id: 0,\n                v2v_opt: {\n                  type: \"\",\n                  id: generateUuid(),\n                  min_version: \"3.1.0\",\n                  super_resolution: {\n                    type: \"\",\n                    id: generateUuid(),\n                    enable: true,\n                    target_width: params.targetWidth,\n                    target_height: params.targetHeight,\n                    origin_width: params.originWidth,\n                    origin_height: params.originHeight\n                  }\n                },\n                origin_history_id: params.originHistoryId,\n                resolution: \"720p\"\n              }]\n            },\n            scene: \"super_resolution\",\n            video_task_extra: metricsExtra,\n            video_ref_params: {\n              type: \"\",\n              id: generateUuid(),\n              generate_type: 0,\n              item_id: parseInt(params.videoId.replace('v', '')),\n              origin_history_id: params.originHistoryId\n            }\n          },\n          process_type: 2\n        }\n      }]\n    };\n\n    const requestData = {\n      extend: {\n        root_model: modelKey,\n        m_video_commerce_info: {\n          benefit_type: \"video_upscale\",\n          resource_id: \"generate_video\", \n          resource_id_type: \"str\",\n          resource_sub_type: \"aigc\"\n        },\n        m_video_commerce_info_list: [{\n          benefit_type: \"video_upscale\",\n          resource_id: \"generate_video\",\n          resource_id_type: \"str\", \n          resource_sub_type: \"aigc\"\n        }]\n      },\n      submit_id: submitId,\n      metrics_extra: metricsExtra,\n      draft_content: JSON.stringify(draftContent),\n      http_common_info: { aid: 513695 }\n    };\n\n    // 构建请求参数\n    const rqParams: any = {\n      \"babi_param\": urlEncode(jsonEncode({\n        \"scenario\": \"image_video_generation\",\n        \"feature_key\": \"aigc_to_video\",\n        \"feature_entrance\": \"to_video\", \n        \"feature_entrance_detail\": \"to_video-jimeng-video-multiframe\"\n      })),\n      \"aid\": parseInt(DEFAULT_ASSISTANT_ID),\n      \"device_platform\": \"web\",\n      \"region\": \"cn\",\n      \"webId\": WEB_ID,\n      \"web_component_open_flag\": 1\n    };\n    rqParams['a_bogus'] = generate_a_bogus(toUrlParams(rqParams), UA);\n\n    // 发送分辨率提升请求\n    const result = await this.request(\n      'POST',\n      '/mweb/v1/aigc_draft/generate',\n      requestData,\n      rqParams\n    );\n\n    console.log('🔍 开始轮询分辨率提升结果...');\n    const pollResult = await this.pollResultWithHistoryExtended(result);\n    const itemList = pollResult.itemList;\n    \n    // 提取视频URL\n    let videoUrl;\n    if (itemList && itemList.length > 0) {\n      const item = itemList[0];\n      videoUrl = item?.video?.transcoded_video?.origin?.video_url ||\n                item?.video?.video_url ||\n                item?.common_attr?.cover_url;\n    }\n\n    console.log('🎨 分辨率提升完成:', videoUrl);\n    return videoUrl;\n  }\n\n}\n\n// 创建API客户端实例，确保环境变量正确加载\nconst getApiClient = () => {\n  const token = process.env.JIMENG_API_TOKEN;\n  console.log('🔍 [API Client Factory] Creating API client instance');\n  console.log('🔍 [API Client Factory] Environment token available:', !!token);\n  \n  if (!token) {\n    console.error('🔍 [API Client Factory] WARNING: JIMENG_API_TOKEN not found in environment variables');\n    console.error('🔍 [API Client Factory] Available env vars starting with JIMENG:', \n      Object.keys(process.env).filter(key => key.startsWith('JIMENG')));\n  }\n  \n  return new JimengApiClient(token);\n};\n\n// 延迟初始化API客户端实例\nlet apiClient: JimengApiClient | null = null;\n\n\n// 导出函数，保持对外接口不变\n\n/**\n * 生成AI图像\n * @param params 图像生成参数\n * @returns 返回生成的图像URL数组\n */\nexport const generateImage = (params: ImageGenerationParams): Promise<string[]> => {\n  // 🔍 Debug logging - 记录API入口参数\n  console.log('🔍 [API Export] generateImage called with params:', JSON.stringify({\n    filePath: params.filePath,\n    prompt: params.prompt ? `${params.prompt.substring(0, 100)}...` : undefined,\n    model: params.model,\n    aspectRatio: params.aspectRatio,\n    sample_strength: params.sample_strength,\n    negative_prompt: params.negative_prompt,\n    refresh_token: params.refresh_token ? '[PROVIDED]' : '[MISSING]'\n  }, null, 2));\n\n  // 延迟初始化API客户端\n  if (!apiClient) {\n    console.log('🔍 [API Export] Initializing API client on first use');\n    apiClient = getApiClient();\n  }\n\n  // 🔍 Debug logging - 检查API客户端实例状态\n  console.log('🔍 [API Export] API Client instance available:', !!apiClient);\n  \n  return apiClient.generateImage(params);\n};\n\n/**\n * 生成AI视频\n * 支持传统模式（首尾帧）和智能多帧模式\n * @param params 视频生成参数\n * @returns 返回生成的视频URL\n */\nexport const generateVideo = (params: VideoGenerationParams): Promise<string> => {\n  // 延迟初始化API客户端\n  if (!apiClient) {\n    console.log('🔍 [API Export] Initializing API client for generateVideo');\n    apiClient = getApiClient();\n  }\n  \n  return apiClient.generateVideo(params)\n}\n\n// 视频后处理参数接口\nexport interface VideoPostProcessParams {\n  videoId: string;\n  originHistoryId: string;\n}\n\nexport interface FrameInterpolationParams extends VideoPostProcessParams {\n  targetFps: 30 | 60;\n  originFps: number;\n  duration?: number;\n}\n\nexport interface SuperResolutionParams extends VideoPostProcessParams {\n  targetWidth: number; // 范围768-2560像素\n  targetHeight: number; // 范围768-2560像素\n  originWidth: number;\n  originHeight: number;\n}\n\n/**\n * 视频补帧操作\n * 将低帧率视频提升至30fps或60fps，提升视频流畅度\n * @param params 补帧参数，包含视频ID、目标帧率等信息\n * @returns 返回处理后的高帧率视频URL\n */\nexport const frameInterpolation = (params: FrameInterpolationParams): Promise<string> => {\n  // 延迟初始化API客户端\n  if (!apiClient) {\n    console.log('🔍 [API Export] Initializing API client for frameInterpolation');\n    apiClient = getApiClient();\n  }\n  \n  return apiClient.frameInterpolation(params);\n};\n\n/**\n * 视频分辨率提升操作\n * 将低分辨率视频提升至更高分辨率，增强视频画质\n * @param params 分辨率提升参数，包含原始和目标分辨率信息\n * @returns 返回处理后的高分辨率视频URL\n */\nexport const superResolution = (params: SuperResolutionParams): Promise<string> => {\n  // 延迟初始化API客户端\n  if (!apiClient) {\n    console.log('🔍 [API Export] Initializing API client for superResolution');\n    apiClient = getApiClient();\n  }\n  \n  return apiClient.superResolution(params);\n};\n\n// 导出接口定义，以便其他模块使用\nexport type { ImageGenerationParams, LogoInfo, VideoGenerationParams };\n","// from https://github.com/NearHuiwen/TiktokDouyinCrawler/blob/main/utils/a_bogus.js\n// All the content in this article is only for learning and communication use, not for any other purpose, strictly prohibited for commercial use and illegal use, otherwise all the consequences are irrelevant to the author!\n\nfunction rc4_encrypt(plaintext: string, key: string): string {\n    const s: number[] = [];\n    for (let i = 0; i < 256; i++) {\n        s[i] = i;\n    }\n    let j = 0;\n    for (let i = 0; i < 256; i++) {\n        j = (j + s[i] + key.charCodeAt(i % key.length)) % 256;\n        [s[i], s[j]] = [s[j], s[i]];\n    }\n\n    let i = 0;\n    j = 0;\n    const cipher: string[] = [];\n    for (let k = 0; k < plaintext.length; k++) {\n        i = (i + 1) % 256;\n        j = (j + s[i]) % 256;\n        [s[i], s[j]] = [s[j], s[i]];\n        const t = (s[i] + s[j]) % 256;\n        cipher.push(String.fromCharCode(s[t] ^ plaintext.charCodeAt(k)));\n    }\n    return cipher.join('');\n}\n\nfunction le(e: number, r: number): number {\n    r %= 32;\n    return ((e << r) | (e >>> (32 - r))) >>> 0;\n}\n\nfunction de(e: number): number | undefined {\n    if (0 <= e && e < 16) return 2043430169;\n    if (16 <= e && e < 64) return 2055708042;\n    console.error(\"invalid j for constant Tj\");\n    return undefined;\n}\n\nfunction pe(e: number, r: number, t: number, n: number): number {\n    if (0 <= e && e < 16) return (r ^ t ^ n) >>> 0;\n    if (16 <= e && e < 64) return (r & t | r & n | t & n) >>> 0;\n    console.error('invalid j for bool function FF');\n    return 0;\n}\n\nfunction he(e: number, r: number, t: number, n: number): number {\n    if (0 <= e && e < 16) return (r ^ t ^ n) >>> 0;\n    if (16 <= e && e < 64) return (r & t | ~r & n) >>> 0;\n    console.error('invalid j for bool function GG');\n    return 0;\n}\n\nfunction reset(this: SM3): void {\n    this.reg[0] = 1937774191;\n    this.reg[1] = 1226093241;\n    this.reg[2] = 388252375;\n    this.reg[3] = 3666478592;\n    this.reg[4] = 2842636476;\n    this.reg[5] = 372324522;\n    this.reg[6] = 3817729613;\n    this.reg[7] = 2969243214;\n    this.chunk = [];\n    this.size = 0;\n}\n\nfunction write(this: SM3, e: string | number[]): void {\n    const a: number[] = typeof e === \"string\"\n        ? (() => {\n            let n = encodeURIComponent(e).replace(/%([0-9A-F]{2})/g, (_, r) => String.fromCharCode(parseInt(r, 16)));\n            const arr = new Array(n.length);\n            Array.prototype.forEach.call(n, (ch: string, idx: number) => {\n                arr[idx] = ch.charCodeAt(0);\n            });\n            return arr;\n        })()\n        : e;\n    this.size += a.length;\n    let f = 64 - this.chunk.length;\n    if (a.length < f) {\n        this.chunk = this.chunk.concat(a);\n    } else {\n        this.chunk = this.chunk.concat(a.slice(0, f));\n        while (this.chunk.length >= 64) {\n            this._compress(this.chunk);\n            if (f < a.length) {\n                this.chunk = a.slice(f, Math.min(f + 64, a.length));\n            } else {\n                this.chunk = [];\n            }\n            f += 64;\n        }\n    }\n}\n\nfunction se(str: string, len: number, pad: string): string {\n    return pad.repeat(len - str.length) + str;\n}\n\nfunction sum(this: SM3, e?: string | number[], t?: 'hex'): string | number[] {\n    if (e) {\n        this.reset();\n        this.write(e);\n    }\n    this._fill();\n    for (let f = 0; f < this.chunk.length; f += 64) {\n        this._compress(this.chunk.slice(f, f + 64));\n    }\n    let i: string | number[] | null = null;\n    if (t === 'hex') {\n        i = \"\";\n        for (let f = 0; f < 8; f++) {\n            i += se(this.reg[f].toString(16), 8, \"0\");\n        }\n    } else {\n        i = new Array(32);\n        for (let f = 0; f < 8; f++) {\n            let c = this.reg[f];\n            i[4 * f + 3] = (255 & c) >>> 0;\n            c >>>= 8;\n            i[4 * f + 2] = (255 & c) >>> 0;\n            c >>>= 8;\n            i[4 * f + 1] = (255 & c) >>> 0;\n            c >>>= 8;\n            i[4 * f] = (255 & c) >>> 0;\n        }\n    }\n    this.reset();\n    return i!;\n}\n\nfunction _compress(this: SM3, t: Array<number>): void {\n    if (t.length < 64) {\n        console.error(\"compress error: not enough data\");\n    } else {\n        const f = (() => {\n            const r = new Array(132);\n            for (let idx = 0; idx < 16; idx++) {\n                r[idx] = idx * 4 < t.length ? t[idx * 4] << 24 : 0;\n                r[idx] |= idx * 4 + 1 < t.length ? t[idx * 4 + 1] << 16 : 0;\n                r[idx] |= idx * 4 + 2 < t.length ? t[idx * 4 + 2] << 8 : 0;\n                r[idx] |= idx * 4 + 3 < t.length ? t[idx * 4 + 3] : 0;\n                r[idx] >>>= 0;\n            }\n            for (let n = 16; n < 68; n++) {\n                let a = r[n - 16] ^ r[n - 9] ^ le(r[n - 3], 15);\n                a = a ^ le(a, 15) ^ le(a, 23);\n                r[n] = (a ^ le(r[n - 13], 7) ^ r[n - 6]) >>> 0;\n            }\n            for (let n = 0; n < 64; n++) {\n                r[n + 68] = (r[n] ^ r[n + 4]) >>> 0;\n            }\n            return r;\n        })();\n        const i = this.reg.slice(0);\n        for (let c = 0; c < 64; c++) {\n            let o = le(i[0], 12) + i[4] + le(de(c)!, c);\n            let s = ((o = le((4294967295 & o) >>> 0, 7)) ^ le(i[0], 12)) >>> 0;\n            let u = pe(c, i[0], i[1], i[2]);\n            u = (4294967295 & (u + i[3] + s + f[c + 68])) >>> 0;\n            let b = he(c, i[4], i[5], i[6]);\n            b = (4294967295 & (b + i[7] + o + f[c])) >>> 0;\n            i[3] = i[2];\n            i[2] = le(i[1], 9);\n            i[1] = i[0];\n            i[0] = u;\n            i[7] = i[6];\n            i[6] = le(i[5], 19);\n            i[5] = i[4];\n            i[4] = (b ^ le(b, 9) ^ le(b, 17)) >>> 0;\n        }\n        for (let l = 0; l < 8; l++) {\n            this.reg[l] = (this.reg[l] ^ i[l]) >>> 0;\n        }\n    }\n}\n\nfunction _fill(this: SM3): void {\n    const a = 8 * this.size;\n    let f = this.chunk.push(128) % 64;\n    if (64 - f < 8) f -= 64;\n    while (f < 56) {\n        this.chunk.push(0);\n        f++;\n    }\n    for (let i = 0; i < 4; i++) {\n        const c = Math.floor(a / 4294967296);\n        this.chunk.push((c >>> (8 * (3 - i))) & 255);\n    }\n    for (let i = 0; i < 4; i++) {\n        this.chunk.push((a >>> (8 * (3 - i))) & 255);\n    }\n}\n\nclass SM3 {\n    reg: number[];\n    chunk: number[];\n    size: number;\n    constructor() {\n        this.reg = [];\n        this.chunk = [];\n        this.size = 0;\n        this.reset();\n    }\n    reset = reset;\n    write = write;\n    sum = sum;\n    _compress = _compress;\n    _fill = _fill;\n}\n\n// Move s_obj outside the function for proper type inference\nconst s_obj = {\n    s0: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\",\n    s1: \"Dkdpgh4ZKsQB80/Mfvw36XI1R25+WUAlEi7NLboqYTOPuzmFjJnryx9HVGcaStCe=\",\n    s2: \"Dkdpgh4ZKsQB80/Mfvw36XI1R25-WUAlEi7NLboqYTOPuzmFjJnryx9HVGcaStCe=\",\n    s3: \"ckdp1h4ZKsUB80/Mfvw36XIgR25+WQAlEi7NLboqYTOPuzmFjJnryx9HVGDaStCe\",\n    s4: \"Dkdpgh2ZmsQB80/MfvV36XI1R45-WUAlEixNLwoqYTOPuzKFjJnry79HbGcaStCe\"\n};\n\nfunction result_encrypt(long_str: string, num: keyof typeof s_obj | null = null): string {\n    const constant = {\n        \"0\": 16515072,\n        \"1\": 258048,\n        \"2\": 4032,\n        \"str\": num ? s_obj[num] : s_obj[\"s0\"],\n    };\n\n    let result = \"\";\n    let lound = 0;\n    let long_int = get_long_int(lound, long_str);\n    for (let i = 0; i < Math.floor(long_str.length / 3 * 4); i++) {\n        if (Math.floor(i / 4) !== lound) {\n            lound += 1;\n            long_int = get_long_int(lound, long_str);\n        }\n        let key = i % 4;\n        let temp_int: number;\n        switch (key) {\n            case 0:\n                temp_int = (long_int & constant[\"0\"]) >> 18;\n                result += constant[\"str\"].charAt(temp_int);\n                break;\n            case 1:\n                temp_int = (long_int & constant[\"1\"]) >> 12;\n                result += constant[\"str\"].charAt(temp_int);\n                break;\n            case 2:\n                temp_int = (long_int & constant[\"2\"]) >> 6;\n                result += constant[\"str\"].charAt(temp_int);\n                break;\n            case 3:\n                temp_int = long_int & 63;\n                result += constant[\"str\"].charAt(temp_int);\n                break;\n            default:\n                break;\n        }\n    }\n    return result;\n}\n\nfunction get_long_int(round: number, long_str: string): number {\n    round = round * 3;\n    return (long_str.charCodeAt(round) << 16) | (long_str.charCodeAt(round + 1) << 8) | (long_str.charCodeAt(round + 2));\n}\n\nfunction gener_random(random: number, option: number[]): number[] {\n    return [\n        ((random & 255 & 170) | (option[0] & 85)), // 163\n        ((random & 255 & 85) | (option[0] & 170)), //87\n        ((random >> 8 & 255 & 170) | (option[1] & 85)), //37\n        ((random >> 8 & 255 & 85) | (option[1] & 170)), //41\n    ];\n}\n\nfunction generate_rc4_bb_str(\n    url_search_params: string,\n    user_agent: string,\n    window_env_str: string,\n    suffix = \"cus\",\n    Arguments: number[] = [0, 1, 14]\n): string {\n    const sm3 = new SM3();\n    const start_time = Date.now();\n\n    // url_search_params两次sm3之的结果\n    const url_search_params_list = sm3.sum(sm3.sum(url_search_params + suffix)) as number[];\n    // 对后缀两次sm3之的结果\n    const cus = sm3.sum(sm3.sum(suffix)) as number[];\n    // 对ua处理之后的结果\n    const ua = sm3.sum(result_encrypt(rc4_encrypt(user_agent, String.fromCharCode(0.00390625, 1, 14)), \"s3\")) as number[];\n\n    const end_time = Date.now();\n    const b: { [key: number]: any } = {\n        8: 3,\n        10: end_time,\n        15: {\n            \"aid\": 6383,\n            \"pageId\": 6241,\n            \"boe\": false,\n            \"ddrt\": 7,\n            \"paths\": {\n                \"include\": [{}, {}, {}, {}, {}, {}, {}],\n                \"exclude\": []\n            },\n            \"track\": {\n                \"mode\": 0,\n                \"delay\": 300,\n                \"paths\": []\n            },\n            \"dump\": true,\n            \"rpU\": \"\"\n        },\n        16: start_time,\n        18: 44,\n        19: [1, 0, 1, 5],\n    };\n\n    b[20] = (b[16] >> 24) & 255;\n    b[21] = (b[16] >> 16) & 255;\n    b[22] = (b[16] >> 8) & 255;\n    b[23] = b[16] & 255;\n    b[24] = (b[16] / 256 / 256 / 256 / 256) >> 0;\n    b[25] = (b[16] / 256 / 256 / 256 / 256 / 256) >> 0;\n\n    b[26] = (Arguments[0] >> 24) & 255;\n    b[27] = (Arguments[0] >> 16) & 255;\n    b[28] = (Arguments[0] >> 8) & 255;\n    b[29] = Arguments[0] & 255;\n\n    b[30] = (Arguments[1] / 256) & 255;\n    b[31] = (Arguments[1] % 256) & 255;\n    b[32] = (Arguments[1] >> 24) & 255;\n    b[33] = (Arguments[1] >> 16) & 255;\n\n    b[34] = (Arguments[2] >> 24) & 255;\n    b[35] = (Arguments[2] >> 16) & 255;\n    b[36] = (Arguments[2] >> 8) & 255;\n    b[37] = Arguments[2] & 255;\n\n    b[38] = url_search_params_list[21];\n    b[39] = url_search_params_list[22];\n\n    b[40] = cus[21];\n    b[41] = cus[22];\n\n    b[42] = ua[23];\n    b[43] = ua[24];\n\n    b[44] = (b[10] >> 24) & 255;\n    b[45] = (b[10] >> 16) & 255;\n    b[46] = (b[10] >> 8) & 255;\n    b[47] = b[10] & 255;\n    b[48] = b[8];\n    b[49] = (b[10] / 256 / 256 / 256 / 256) >> 0;\n    b[50] = (b[10] / 256 / 256 / 256 / 256 / 256) >> 0;\n\n    b[51] = b[15]['pageId'];\n    b[52] = (b[15]['pageId'] >> 24) & 255;\n    b[53] = (b[15]['pageId'] >> 16) & 255;\n    b[54] = (b[15]['pageId'] >> 8) & 255;\n    b[55] = b[15]['pageId'] & 255;\n\n    b[56] = b[15]['aid'];\n    b[57] = b[15]['aid'] & 255;\n    b[58] = (b[15]['aid'] >> 8) & 255;\n    b[59] = (b[15]['aid'] >> 16) & 255;\n    b[60] = (b[15]['aid'] >> 24) & 255;\n\n    const window_env_list: number[] = [];\n    for (let index = 0; index < window_env_str.length; index++) {\n        window_env_list.push(window_env_str.charCodeAt(index));\n    }\n    b[64] = window_env_list.length;\n    b[65] = b[64] & 255;\n    b[66] = (b[64] >> 8) & 255;\n\n    b[69] = [].length;\n    b[70] = b[69] & 255;\n    b[71] = (b[69] >> 8) & 255;\n\n    b[72] = b[18] ^ b[20] ^ b[26] ^ b[30] ^ b[38] ^ b[40] ^ b[42] ^ b[21] ^ b[27] ^ b[31] ^ b[35] ^ b[39] ^ b[41] ^ b[43] ^ b[22] ^\n        b[28] ^ b[32] ^ b[36] ^ b[23] ^ b[29] ^ b[33] ^ b[37] ^ b[44] ^ b[45] ^ b[46] ^ b[47] ^ b[48] ^ b[49] ^ b[50] ^ b[24] ^\n        b[25] ^ b[52] ^ b[53] ^ b[54] ^ b[55] ^ b[57] ^ b[58] ^ b[59] ^ b[60] ^ b[65] ^ b[66] ^ b[70] ^ b[71];\n\n    let bb: number[] = [\n        b[18], b[20], b[52], b[26], b[30], b[34], b[58], b[38], b[40], b[53], b[42], b[21], b[27], b[54], b[55], b[31],\n        b[35], b[57], b[39], b[41], b[43], b[22], b[28], b[32], b[60], b[36], b[23], b[29], b[33], b[37], b[44], b[45],\n        b[59], b[46], b[47], b[48], b[49], b[50], b[24], b[25], b[65], b[66], b[70], b[71]\n    ];\n    bb = bb.concat(window_env_list).concat(b[72]);\n    return rc4_encrypt(String.fromCharCode(...bb), String.fromCharCode(121));\n}\n\nfunction generate_random_str(): string {\n    let random_str_list: number[] = [];\n    random_str_list = random_str_list.concat(gener_random(Math.random() * 10000, [3, 45]));\n    random_str_list = random_str_list.concat(gener_random(Math.random() * 10000, [1, 0]));\n    random_str_list = random_str_list.concat(gener_random(Math.random() * 10000, [1, 5]));\n    return String.fromCharCode(...random_str_list);\n}\n\nexport function generate_a_bogus(url_search_params: string, user_agent: string): string {\n    const result_str = generate_random_str() + generate_rc4_bb_str(\n        url_search_params,\n        user_agent,\n        \"1536|747|1536|834|0|30|0|0|1536|834|1536|864|1525|747|24|24|Win32\"\n    );\n    return result_encrypt(result_str, \"s4\") + \"=\";\n}\n\n//测试调用\n// console.log(generate_a_bogus(\n//     \"device_platform=webapp&aid=6383&channel=channel_pc_web&update_version_code=170400&pc_client_type=1&version_code=170400&version_name=17.4.0&cookie_enabled=true&screen_width=1536&screen_height=864&browser_language=zh-CN&browser_platform=Win32&browser_name=Chrome&browser_version=123.0.0.0&browser_online=true&engine_name=Blink&engine_version=123.0.0.0&os_name=Windows&os_version=10&cpu_core_num=16&device_memory=8&platform=PC&downlink=10&effective_type=4g&round_trip_time=50&webid=7362810250930783783&msToken=VkDUvz1y24CppXSl80iFPr6ez-3FiizcwD7fI1OqBt6IICq9RWG7nCvxKb8IVi55mFd-wnqoNkXGnxHrikQb4PuKob5Q-YhDp5Um215JzlBszkUyiEvR\",\n//     \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36\"\n// ));\n","\nimport { v4 as uuidv4 } from 'uuid';\n\nexport function toUrlParams(obj: Record<string, any>): string {\n  const params = new URLSearchParams()\n\n  Object.entries(obj).forEach(([key, value]) => {\n    if (value !== undefined && value !== null) {\n      if (Array.isArray(value)) {\n        value.forEach(v => params.append(key, String(v)))\n      } else {\n        params.append(key, String(value))\n      }\n    }\n  })\n\n  return params.toString()\n}\n\n\nexport const generateMsToken = (randomlength = 128) => {\n  const baseStr = 'ABCDEFGHIGKLMNOPQRSTUVWXYZabcdefghigklmnopqrstuvwxyz0123456789='\n  let random_str = ''\n  const length = baseStr.length - 1\n  for (let i = 0; i < randomlength; i++) {\n    random_str += baseStr[Math.floor(Math.random() * length)]\n  }\n  return random_str\n}\n\n\nexport const generateUuid = (): string => {\n  return uuidv4();\n};\n\nexport const jsonEncode = (obj: any): string => {\n  return JSON.stringify(obj);\n};\n\nexport const urlEncode = (str: string): string => {\n  return encodeURI(str);\n};\n\nexport const unixTimestamp = () => {\n  return parseInt(`${Date.now() / 1000}`);\n}"],"mappings":"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","names":["i","uuidv4","path","axios","_a","fs","dimensions","width","height","imageRatio","result","totalCount","crc32","_a"]}